// Generated by github.com/kzantow/go-ld
//
// SPDX-License-Identifier: MIT

package v3_0

import (
	"reflect"
	"time"

	"github.com/kzantow/go-ld"
)

type AnyAIPackage interface {
	asAIPackage() *AIPackage
}

// AIPackage Specifies an AI package and its associated information.
type AIPackage struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/AI/AIPackage"`
	Package
	// Domains Captures the domain in which the AI package can be used.
	Domains []string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/domain" type:"http://www.w3.org/2001/XMLSchema#string"`
	// EnergyConsumption Indicates the amount of energy consumption incurred by an AI model.
	EnergyConsumption AnyEnergyConsumption `iri:"https://spdx.org/rdf/3.0.1/terms/AI/energyConsumption" type:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumption"`
	// ModelDataPreprocessings Describes all the preprocessing steps applied to the training data before the\nmodel training.
	ModelDataPreprocessings []string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/modelDataPreprocessing" type:"http://www.w3.org/2001/XMLSchema#string"`
	// UseSensitivePersonalInformation Records if sensitive personal information is used during model training or\ncould be used during the inference.
	UseSensitivePersonalInformation PresenceType `iri:"https://spdx.org/rdf/3.0.1/terms/AI/useSensitivePersonalInformation" type:"https://spdx.org/rdf/3.0.1/terms/Core/PresenceType"`
	// AutonomyType Indicates whether the system can perform a decision or action without human\ninvolvement or guidance.
	AutonomyType PresenceType `iri:"https://spdx.org/rdf/3.0.1/terms/AI/autonomyType" type:"https://spdx.org/rdf/3.0.1/terms/Core/PresenceType"`
	// SafetyRiskAssessment Records the results of general safety risk assessment of the AI system.
	SafetyRiskAssessment SafetyRiskAssessmentType `iri:"https://spdx.org/rdf/3.0.1/terms/AI/safetyRiskAssessment" type:"https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType"`
	// Hyperparameters Records a hyperparameter used to build the AI model contained in the AI\npackage.
	Hyperparameters DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/hyperparameter" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	// Limitation Captures a limitation of the AI software.
	Limitation string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/limitation" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ModelExplainabilities Describes methods that can be used to explain the results from the AI model.
	ModelExplainabilities []string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/modelExplainability" type:"http://www.w3.org/2001/XMLSchema#string"`
	// StandardCompliances Captures a standard that is being complied with.
	StandardCompliances []string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/standardCompliance" type:"http://www.w3.org/2001/XMLSchema#string"`
	// MetricDecisionThresholds Captures the threshold that was used for computation of a metric described in\nthe metric field.
	MetricDecisionThresholds DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/metricDecisionThreshold" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	// TypeOfModels Records the type of the model used in the AI software.
	TypeOfModels []string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/typeOfModel" type:"http://www.w3.org/2001/XMLSchema#string"`
	// InformationAboutApplication Provides relevant information about the AI software, not including the model\ndescription.
	InformationAboutApplication string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/informationAboutApplication" type:"http://www.w3.org/2001/XMLSchema#string"`
	// InformationAboutTraining Describes relevant information about different steps of the training process.
	InformationAboutTraining string `iri:"https://spdx.org/rdf/3.0.1/terms/AI/informationAboutTraining" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Metrics Records the measurement of prediction quality of the AI model.
	Metrics DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/metric" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
}

func (o *AIPackage) asAIPackage() *AIPackage {
	return o
}

type AIPackageList []AnyAIPackage

func (o *AIPackageList) AIPackages() ld.TypeSeq[AnyAIPackage, *AIPackage] {
	return ld.NewTypeSeq(*o, castAIPackage)
}

type AnyAgent interface {
	asAgent() *Agent
}

// Agent represents anything with the potential to act on a system.
type Agent struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Agent"`
	Element
}

func (o *Agent) asAgent() *Agent {
	return o
}

type AgentList []AnyAgent

func (o *AgentList) Agents() ld.TypeSeq[AnyAgent, *Agent] {
	return ld.NewTypeSeq(*o, castAgent)
}

func (o *AgentList) Organizations() ld.TypeSeq[AnyAgent, *Organization] {
	return ld.NewTypeSeq(*o, castOrganization)
}

func (o *AgentList) People() ld.TypeSeq[AnyAgent, *Person] {
	return ld.NewTypeSeq(*o, castPerson)
}

func (o *AgentList) SoftwareAgents() ld.TypeSeq[AnyAgent, *SoftwareAgent] {
	return ld.NewTypeSeq(*o, castSoftwareAgent)
}

type AnyAnnotation interface {
	asAnnotation() *Annotation
}

// Annotation An assertion made in relation to one or more elements.
type Annotation struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Annotation"`
	Element
	// Subject An Element an annotator has made an assertion about.
	Subject AnyElement `iri:"https://spdx.org/rdf/3.0.1/terms/Core/subject" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	// ContentType Provides information about the content type of an Element or a Property.
	ContentType string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/contentType" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Statement Commentary on an assertion that an annotator has made.
	Statement string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/statement" type:"http://www.w3.org/2001/XMLSchema#string"`
	// AnnotationType Describes the type of annotation.
	AnnotationType AnnotationType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/annotationType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType"`
}

func (o *Annotation) asAnnotation() *Annotation {
	return o
}

type AnnotationList []AnyAnnotation

func (o *AnnotationList) Annotations() ld.TypeSeq[AnyAnnotation, *Annotation] {
	return ld.NewTypeSeq(*o, castAnnotation)
}

// AnnotationType Specifies the type of an annotation.
type AnnotationType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType"`
	id string  `iri:"@id"`
}

// AnnotationType_Other Used to store extra information about an Element which is not part of a review (e.g. extra information provided during the creation of the Element).
var AnnotationType_Other = AnnotationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType/other",
}

// AnnotationType_Review Used when someone reviews the Element.
var AnnotationType_Review = AnnotationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType/review",
}

type AnyArtifact interface {
	asArtifact() *Artifact
}

// Artifact A distinct article or unit within the digital domain.
type Artifact struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Artifact"`
	Element
	// StandardNames The name of a relevant standard that may apply to an artifact.
	StandardNames []string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/standardName" type:"http://www.w3.org/2001/XMLSchema#string"`
	// BuiltTime Specifies the time an artifact was built.
	BuiltTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/builtTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// ReleaseTime Specifies the time an artifact was released.
	ReleaseTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/releaseTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// SupportLevels Specifies the level of support associated with an artifact.
	SupportLevels []SupportType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/supportLevel" type:"https://spdx.org/rdf/3.0.1/terms/Core/SupportType"`
	// SuppliedBy Identifies who or what supplied the artifact or VulnAssessmentRelationship\nreferenced by the Element.
	SuppliedBy AnyAgent `iri:"https://spdx.org/rdf/3.0.1/terms/Core/suppliedBy" type:"https://spdx.org/rdf/3.0.1/terms/Core/Agent"`
	// OriginatedBy Identifies from where or whom the Element originally came.
	OriginatedBy AgentList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/originatedBy" type:"https://spdx.org/rdf/3.0.1/terms/Core/Agent"`
	// ValidUntilTime Specifies until when the artifact can be used before its usage needs to be\nreassessed.
	ValidUntilTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/validUntilTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
}

func (o *Artifact) asArtifact() *Artifact {
	return o
}

type ArtifactList []AnyArtifact

func (o *ArtifactList) AIPackages() ld.TypeSeq[AnyArtifact, *AIPackage] {
	return ld.NewTypeSeq(*o, castAIPackage)
}

func (o *ArtifactList) Artifacts() ld.TypeSeq[AnyArtifact, *Artifact] {
	return ld.NewTypeSeq(*o, castArtifact)
}

func (o *ArtifactList) DatasetPackages() ld.TypeSeq[AnyArtifact, *DatasetPackage] {
	return ld.NewTypeSeq(*o, castDatasetPackage)
}

func (o *ArtifactList) Files() ld.TypeSeq[AnyArtifact, *File] {
	return ld.NewTypeSeq(*o, castFile)
}

func (o *ArtifactList) Packages() ld.TypeSeq[AnyArtifact, *Package] {
	return ld.NewTypeSeq(*o, castPackage)
}

func (o *ArtifactList) Snippets() ld.TypeSeq[AnyArtifact, *Snippet] {
	return ld.NewTypeSeq(*o, castSnippet)
}

func (o *ArtifactList) SoftwareArtifacts() ld.TypeSeq[AnyArtifact, *SoftwareArtifact] {
	return ld.NewTypeSeq(*o, castSoftwareArtifact)
}

func (o *ArtifactList) Vulnerabilities() ld.TypeSeq[AnyArtifact, *Vulnerability] {
	return ld.NewTypeSeq(*o, castVulnerability)
}

type AnyBom interface {
	asBom() *Bom
}

// Bom A container for a grouping of SPDX-3.0 content characterizing details\n(provenence, composition, licensing, etc.) about a product.
type Bom struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Bom"`
	Bundle
}

func (o *Bom) asBom() *Bom {
	return o
}

type BomList []AnyBom

func (o *BomList) Boms() ld.TypeSeq[AnyBom, *Bom] {
	return ld.NewTypeSeq(*o, castBom)
}

func (o *BomList) Sboms() ld.TypeSeq[AnyBom, *Sbom] {
	return ld.NewTypeSeq(*o, castSbom)
}

type AnyBuild interface {
	asBuild() *Build
}

// Build Class that describes a build instance of software/artifacts.
type Build struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Build/Build"`
	Element
	// BuildId A buildId is a locally unique identifier used by a builder to identify a unique\ninstance of a build produced by it.
	BuildId string `iri:"https://spdx.org/rdf/3.0.1/terms/Build/buildId" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ConfigSourceUris Property that describes the URI of the build configuration source file.
	ConfigSourceUris []ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Build/configSourceUri" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// BuildStartTime Property describing the start time of a build.
	BuildStartTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Build/buildStartTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// ConfigSourceDigests Property that describes the digest of the build configuration file used to\ninvoke a build.
	ConfigSourceDigests HashList `iri:"https://spdx.org/rdf/3.0.1/terms/Build/configSourceDigest" type:"https://spdx.org/rdf/3.0.1/terms/Core/Hash"`
	// Parameters Property describing a parameter used in an instance of a build.
	Parameters DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/Build/parameter" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	// BuildType A buildType is a hint that is used to indicate the toolchain, platform, or\ninfrastructure that the build was invoked on.
	BuildType ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Build/buildType" required:"true" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// ConfigSourceEntrypoints Property describes the invocation entrypoint of a build.
	ConfigSourceEntrypoints []string `iri:"https://spdx.org/rdf/3.0.1/terms/Build/configSourceEntrypoint" type:"http://www.w3.org/2001/XMLSchema#string"`
	// BuildEndTime Property that describes the time at which a build stops.
	BuildEndTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Build/buildEndTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// Environments Property describing the session in which a build is invoked.
	Environments DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/Build/environment" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
}

func (o *Build) asBuild() *Build {
	return o
}

type BuildList []AnyBuild

func (o *BuildList) Builds() ld.TypeSeq[AnyBuild, *Build] {
	return ld.NewTypeSeq(*o, castBuild)
}

type AnyBundle interface {
	asBundle() *Bundle
}

// Bundle A collection of Elements that have a shared context.
type Bundle struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Bundle"`
	ElementCollection
	// Context Gives information about the circumstances or unifying properties\nthat Elements of the bundle have been assembled under.
	Context string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/context" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *Bundle) asBundle() *Bundle {
	return o
}

type BundleList []AnyBundle

func (o *BundleList) Boms() ld.TypeSeq[AnyBundle, *Bom] {
	return ld.NewTypeSeq(*o, castBom)
}

func (o *BundleList) Bundles() ld.TypeSeq[AnyBundle, *Bundle] {
	return ld.NewTypeSeq(*o, castBundle)
}

func (o *BundleList) Sboms() ld.TypeSeq[AnyBundle, *Sbom] {
	return ld.NewTypeSeq(*o, castSbom)
}

type AnyCdxPropertiesExtension interface {
	asCdxPropertiesExtension() *CdxPropertiesExtension
}

// CdxPropertiesExtension A type of extension consisting of a list of name value pairs.
type CdxPropertiesExtension struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/CdxPropertiesExtension"`
	Extension
	// CdxProperties Provides a map of a property names to a values.
	CdxProperties CdxPropertyEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/cdxProperty" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Extension/CdxPropertyEntry"`
}

func (o *CdxPropertiesExtension) asCdxPropertiesExtension() *CdxPropertiesExtension {
	return o
}

type CdxPropertiesExtensionList []AnyCdxPropertiesExtension

func (o *CdxPropertiesExtensionList) CdxPropertiesExtensions() ld.TypeSeq[AnyCdxPropertiesExtension, *CdxPropertiesExtension] {
	return ld.NewTypeSeq(*o, castCdxPropertiesExtension)
}

type AnyCdxPropertyEntry interface {
	asCdxPropertyEntry() *CdxPropertyEntry
}

// CdxPropertyEntry A property name with an associated value.
type CdxPropertyEntry struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/CdxPropertyEntry"`
	ID string  `iri:"@id"`
	// CdxPropValue A value used in a CdxPropertyEntry name-value pair.
	CdxPropValue string `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/cdxPropValue" type:"http://www.w3.org/2001/XMLSchema#string"`
	// CdxPropName A name used in a CdxPropertyEntry name-value pair.
	CdxPropName string `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/cdxPropName" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *CdxPropertyEntry) asCdxPropertyEntry() *CdxPropertyEntry {
	return o
}

type CdxPropertyEntryList []AnyCdxPropertyEntry

func (o *CdxPropertyEntryList) CdxPropertyEntries() ld.TypeSeq[AnyCdxPropertyEntry, *CdxPropertyEntry] {
	return ld.NewTypeSeq(*o, castCdxPropertyEntry)
}

// ConfidentialityLevelType Categories of confidentiality level.
type ConfidentialityLevelType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType"`
	id string  `iri:"@id"`
}

// ConfidentialityLevelType_Amber Data points in the dataset can be shared only with specific organizations and their clients on a need to know basis.
var ConfidentialityLevelType_Amber = ConfidentialityLevelType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType/amber",
}

// ConfidentialityLevelType_Clear Dataset may be distributed freely, without restriction.
var ConfidentialityLevelType_Clear = ConfidentialityLevelType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType/clear",
}

// ConfidentialityLevelType_Green Dataset can be shared within a community of peers and partners.
var ConfidentialityLevelType_Green = ConfidentialityLevelType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType/green",
}

// ConfidentialityLevelType_Red Data points in the dataset are highly confidential and can only be shared with named recipients.
var ConfidentialityLevelType_Red = ConfidentialityLevelType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType/red",
}

type AnyConjunctiveLicenseSet interface {
	asConjunctiveLicenseSet() *ConjunctiveLicenseSet
}

// ConjunctiveLicenseSet Portion of an AnyLicenseInfo representing a set of licensing information\nwhere all elements apply.
type ConjunctiveLicenseSet struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ConjunctiveLicenseSet"`
	LicenseInfo
	// Members A license expression participating in a license set.
	Members LicenseInfoList `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/member" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/AnyLicenseInfo"`
}

func (o *ConjunctiveLicenseSet) asConjunctiveLicenseSet() *ConjunctiveLicenseSet {
	return o
}

type ConjunctiveLicenseSetList []AnyConjunctiveLicenseSet

func (o *ConjunctiveLicenseSetList) ConjunctiveLicenseSets() ld.TypeSeq[AnyConjunctiveLicenseSet, *ConjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castConjunctiveLicenseSet)
}

type AnyContentIdentifier interface {
	asContentIdentifier() *ContentIdentifier
}

// ContentIdentifier A canonical, unique, immutable identifier
type ContentIdentifier struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifier"`
	IntegrityMethod
	// ContentIdentifierType Specifies the type of the content identifier.
	ContentIdentifierType ContentIdentifierType `iri:"https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifierType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType"`
	// ContentIdentifierValue Specifies the value of the content identifier.
	ContentIdentifierValue ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifierValue" required:"true" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
}

func (o *ContentIdentifier) asContentIdentifier() *ContentIdentifier {
	return o
}

type ContentIdentifierList []AnyContentIdentifier

func (o *ContentIdentifierList) ContentIdentifiers() ld.TypeSeq[AnyContentIdentifier, *ContentIdentifier] {
	return ld.NewTypeSeq(*o, castContentIdentifier)
}

// ContentIdentifierType Specifies the type of a content identifier.
type ContentIdentifierType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType"`
	id string  `iri:"@id"`
}

// ContentIdentifierType_Gitoid [Gitoid](https://www.iana.org/assignments/uri-schemes/prov/gitoid), stands for [Git Object ID](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects). A gitoid of type blob is a unique hash of a binary artifact. A gitoid may represent either an [Artifact Identifier](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-identifier-types) for the software artifact or an [Input Manifest Identifier](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#input-manifest-identifier) for the software artifact's associated [Artifact Input Manifest](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-input-manifest); this ambiguity exists because the Artifact Input Manifest is itself an artifact, and the gitoid of that artifact is its valid identifier. Gitoids calculated on software artifacts (Snippet, File, or Package Elements) should be recorded in the SPDX 3.0 SoftwareArtifact's contentIdentifier property. Gitoids calculated on the Artifact Input Manifest (Input Manifest Identifier) should be recorded in the SPDX 3.0 Element's externalIdentifier property. See [OmniBOR Specification](https://github.com/omnibor/spec/), a minimalistic specification for describing software [Artifact Dependency Graphs](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-dependency-graph-adg).
var ContentIdentifierType_Gitoid = ContentIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType/gitoid",
}

// ContentIdentifierType_Swhid SoftWare Hash IDentifier, a persistent intrinsic identifier for digital artifacts, such as files, trees (also known as directories or folders), commits, and other objects typically found in version control systems. The format of the identifiers is defined in the [SWHID specification](https://www.swhid.org/specification/v1.1/4.Syntax) (ISO/IEC DIS 18670). They typically look like `swh:1:cnt:94a9ed024d3859793618152ea559a168bbcbb5e2`.
var ContentIdentifierType_Swhid = ContentIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType/swhid",
}

type AnyCreationInfo interface {
	asCreationInfo() *CreationInfo
}

// CreationInfo Provides information about the creation of the Element.
type CreationInfo struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/CreationInfo"`
	ID string  `iri:"@id"`
	// SpecVersion Provides a reference number that can be used to understand how to parse and\ninterpret an Element.
	SpecVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/specVersion" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Created Identifies when the Element was originally created.
	Created time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/created" required:"true" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// CreatedUsing Identifies the tooling that was used during the creation of the Element.
	CreatedUsing ToolList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/createdUsing" type:"https://spdx.org/rdf/3.0.1/terms/Core/Tool"`
	// Comment Provide consumers with comments by the creator of the Element about the\nElement.
	Comment string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/comment" type:"http://www.w3.org/2001/XMLSchema#string"`
	// CreatedBy Identifies who or what created the Element.
	CreatedBy AgentList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/createdBy" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/Agent"`
}

func (o *CreationInfo) asCreationInfo() *CreationInfo {
	return o
}

type CreationInfoList []AnyCreationInfo

func (o *CreationInfoList) CreationInfos() ld.TypeSeq[AnyCreationInfo, *CreationInfo] {
	return ld.NewTypeSeq(*o, castCreationInfo)
}

type AnyCustomLicense interface {
	asCustomLicense() *CustomLicense
}

// CustomLicense A license that is not listed on the SPDX License List.
type CustomLicense struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/CustomLicense"`
	License
}

func (o *CustomLicense) asCustomLicense() *CustomLicense {
	return o
}

type CustomLicenseList []AnyCustomLicense

func (o *CustomLicenseList) CustomLicenses() ld.TypeSeq[AnyCustomLicense, *CustomLicense] {
	return ld.NewTypeSeq(*o, castCustomLicense)
}

type AnyCustomLicenseAddition interface {
	asCustomLicenseAddition() *CustomLicenseAddition
}

// CustomLicenseAddition A license addition that is not listed on the SPDX Exceptions List.
type CustomLicenseAddition struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/CustomLicenseAddition"`
	LicenseAddition
}

func (o *CustomLicenseAddition) asCustomLicenseAddition() *CustomLicenseAddition {
	return o
}

type CustomLicenseAdditionList []AnyCustomLicenseAddition

func (o *CustomLicenseAdditionList) CustomLicenseAdditions() ld.TypeSeq[AnyCustomLicenseAddition, *CustomLicenseAddition] {
	return ld.NewTypeSeq(*o, castCustomLicenseAddition)
}

// CvssSeverityType Specifies the CVSS base, temporal, threat, or environmental severity type.
type CvssSeverityType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType"`
	id string  `iri:"@id"`
}

// CvssSeverityType_Critical When a CVSS score is between 9.0 - 10.0
var CvssSeverityType_Critical = CvssSeverityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/critical",
}

// CvssSeverityType_High When a CVSS score is between 7.0 - 8.9
var CvssSeverityType_High = CvssSeverityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/high",
}

// CvssSeverityType_Low When a CVSS score is between 0.1 - 3.9
var CvssSeverityType_Low = CvssSeverityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/low",
}

// CvssSeverityType_Medium When a CVSS score is between 4.0 - 6.9
var CvssSeverityType_Medium = CvssSeverityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/medium",
}

// CvssSeverityType_None When a CVSS score is 0.0
var CvssSeverityType_None = CvssSeverityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/none",
}

type AnyCvssV2VulnAssessmentRelationship interface {
	asCvssV2VulnAssessmentRelationship() *CvssV2VulnAssessmentRelationship
}

// CvssV2VulnAssessmentRelationship Provides a CVSS version 2.0 assessment for a vulnerability.
type CvssV2VulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/CvssV2VulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// VectorString Specifies the CVSS vector string for a vulnerability.
	VectorString string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/vectorString" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Score Provides a numerical (0-10) representation of the severity of a vulnerability.
	Score float64 `iri:"https://spdx.org/rdf/3.0.1/terms/Security/score" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
}

func (o *CvssV2VulnAssessmentRelationship) asCvssV2VulnAssessmentRelationship() *CvssV2VulnAssessmentRelationship {
	return o
}

type CvssV2VulnAssessmentRelationshipList []AnyCvssV2VulnAssessmentRelationship

func (o *CvssV2VulnAssessmentRelationshipList) CvssV2VulnAssessmentRelationships() ld.TypeSeq[AnyCvssV2VulnAssessmentRelationship, *CvssV2VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV2VulnAssessmentRelationship)
}

type AnyCvssV3VulnAssessmentRelationship interface {
	asCvssV3VulnAssessmentRelationship() *CvssV3VulnAssessmentRelationship
}

// CvssV3VulnAssessmentRelationship Provides a CVSS version 3 assessment for a vulnerability.
type CvssV3VulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/CvssV3VulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// Score Provides a numerical (0-10) representation of the severity of a vulnerability.
	Score float64 `iri:"https://spdx.org/rdf/3.0.1/terms/Security/score" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
	// Severity Specifies the CVSS qualitative severity rating of a vulnerability in relation to a piece of software.
	Severity CvssSeverityType `iri:"https://spdx.org/rdf/3.0.1/terms/Security/severity" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType"`
	// VectorString Specifies the CVSS vector string for a vulnerability.
	VectorString string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/vectorString" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *CvssV3VulnAssessmentRelationship) asCvssV3VulnAssessmentRelationship() *CvssV3VulnAssessmentRelationship {
	return o
}

type CvssV3VulnAssessmentRelationshipList []AnyCvssV3VulnAssessmentRelationship

func (o *CvssV3VulnAssessmentRelationshipList) CvssV3VulnAssessmentRelationships() ld.TypeSeq[AnyCvssV3VulnAssessmentRelationship, *CvssV3VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV3VulnAssessmentRelationship)
}

type AnyCvssV4VulnAssessmentRelationship interface {
	asCvssV4VulnAssessmentRelationship() *CvssV4VulnAssessmentRelationship
}

// CvssV4VulnAssessmentRelationship Provides a CVSS version 4 assessment for a vulnerability.
type CvssV4VulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/CvssV4VulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// Severity Specifies the CVSS qualitative severity rating of a vulnerability in relation to a piece of software.
	Severity CvssSeverityType `iri:"https://spdx.org/rdf/3.0.1/terms/Security/severity" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType"`
	// VectorString Specifies the CVSS vector string for a vulnerability.
	VectorString string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/vectorString" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Score Provides a numerical (0-10) representation of the severity of a vulnerability.
	Score float64 `iri:"https://spdx.org/rdf/3.0.1/terms/Security/score" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
}

func (o *CvssV4VulnAssessmentRelationship) asCvssV4VulnAssessmentRelationship() *CvssV4VulnAssessmentRelationship {
	return o
}

type CvssV4VulnAssessmentRelationshipList []AnyCvssV4VulnAssessmentRelationship

func (o *CvssV4VulnAssessmentRelationshipList) CvssV4VulnAssessmentRelationships() ld.TypeSeq[AnyCvssV4VulnAssessmentRelationship, *CvssV4VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV4VulnAssessmentRelationship)
}

// DatasetAvailabilityType Availability of dataset.
type DatasetAvailabilityType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType"`
	id string  `iri:"@id"`
}

// DatasetAvailabilityType_Clickthrough the dataset is not publicly available and can only be accessed after affirmatively accepting terms on a clickthrough webpage.
var DatasetAvailabilityType_Clickthrough = DatasetAvailabilityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/clickthrough",
}

// DatasetAvailabilityType_DirectDownload the dataset is publicly available and can be downloaded directly.
var DatasetAvailabilityType_DirectDownload = DatasetAvailabilityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/directDownload",
}

// DatasetAvailabilityType_Query the dataset is publicly available, but not all at once, and can only be accessed through queries which return parts of the dataset.
var DatasetAvailabilityType_Query = DatasetAvailabilityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/query",
}

// DatasetAvailabilityType_Registration the dataset is not publicly available and an email registration is required before accessing the dataset, although without an affirmative acceptance of terms.
var DatasetAvailabilityType_Registration = DatasetAvailabilityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/registration",
}

// DatasetAvailabilityType_ScrapingScript the dataset provider is not making available the underlying data and the dataset must be reassembled, typically using the provided script for scraping the data.
var DatasetAvailabilityType_ScrapingScript = DatasetAvailabilityType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/scrapingScript",
}

type AnyDatasetPackage interface {
	asDatasetPackage() *DatasetPackage
}

// DatasetPackage Specifies a data package and its associated information.
type DatasetPackage struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetPackage"`
	Package
	// ConfidentialityLevel Describes the confidentiality level of the data points contained in the dataset.
	ConfidentialityLevel ConfidentialityLevelType `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/confidentialityLevel" type:"https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType"`
	// AnonymizationMethodUseds Describes the anonymization methods used.
	AnonymizationMethodUseds []string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/anonymizationMethodUsed" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DatasetUpdateMechanism Describes a mechanism to update the dataset.
	DatasetUpdateMechanism string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/datasetUpdateMechanism" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DatasetNoise Describes potentially noisy elements of the dataset.
	DatasetNoise string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/datasetNoise" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DatasetSize Captures the size of the dataset.
	DatasetSize ld.NonNegativeInt `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/datasetSize" type:"http://www.w3.org/2001/XMLSchema#nonNegativeInteger"`
	// Sensors Describes a sensor used for collecting the data.
	Sensors DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/sensor" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	// IntendedUse Describes what the given dataset should be used for.
	IntendedUse string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/intendedUse" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DataPreprocessings Describes the preprocessing steps that were applied to the raw data to create the given dataset.
	DataPreprocessings []string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/dataPreprocessing" type:"http://www.w3.org/2001/XMLSchema#string"`
	// KnownBias Records the biases that the dataset is known to encompass.
	KnownBias []string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/knownBias" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DatasetAvailability The field describes the availability of a dataset.
	DatasetAvailability DatasetAvailabilityType `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/datasetAvailability" type:"https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType"`
	// HasSensitivePersonalInformation Describes if any sensitive personal information is present in the dataset.
	HasSensitivePersonalInformation PresenceType `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/hasSensitivePersonalInformation" type:"https://spdx.org/rdf/3.0.1/terms/Core/PresenceType"`
	// DataCollectionProcess Describes how the dataset was collected.
	DataCollectionProcess string `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/dataCollectionProcess" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DatasetTypes Describes the type of the given dataset.
	DatasetTypes []DatasetType `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/datasetType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType"`
}

func (o *DatasetPackage) asDatasetPackage() *DatasetPackage {
	return o
}

type DatasetPackageList []AnyDatasetPackage

func (o *DatasetPackageList) DatasetPackages() ld.TypeSeq[AnyDatasetPackage, *DatasetPackage] {
	return ld.NewTypeSeq(*o, castDatasetPackage)
}

// DatasetType Enumeration of dataset types.
type DatasetType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType"`
	id string  `iri:"@id"`
}

// DatasetType_Audio data is audio based, such as a collection of music from the 80s.
var DatasetType_Audio = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/audio",
}

// DatasetType_Categorical data that is classified into a discrete number of categories, such as the eye color of a population of people.
var DatasetType_Categorical = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/categorical",
}

// DatasetType_Graph data is in the form of a graph where entries are somehow related to each other through edges, such a social network of friends.
var DatasetType_Graph = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/graph",
}

// DatasetType_Image data is a collection of images such as pictures of animals.
var DatasetType_Image = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/image",
}

// DatasetType_NoAssertion data type is not known.
var DatasetType_NoAssertion = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/noAssertion",
}

// DatasetType_Numeric data consists only of numeric entries.
var DatasetType_Numeric = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/numeric",
}

// DatasetType_Other data is of a type not included in this list.
var DatasetType_Other = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/other",
}

// DatasetType_Sensor data is recorded from a physical sensor, such as a thermometer reading or biometric device.
var DatasetType_Sensor = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/sensor",
}

// DatasetType_Structured data is stored in tabular format or retrieved from a relational database.
var DatasetType_Structured = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/structured",
}

// DatasetType_Syntactic data describes the syntax or semantics of a language or text, such as a parse tree used for natural language processing.
var DatasetType_Syntactic = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/syntactic",
}

// DatasetType_Text data consists of unstructured text, such as a book, Wikipedia article (without images), or transcript.
var DatasetType_Text = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/text",
}

// DatasetType_Timeseries data is recorded in an ordered sequence of timestamped entries, such as the price of a stock over the course of a day.
var DatasetType_Timeseries = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/timeseries",
}

// DatasetType_Timestamp data is recorded with a timestamp for each entry, but not necessarily ordered or at specific intervals, such as when a taxi ride starts and ends.
var DatasetType_Timestamp = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/timestamp",
}

// DatasetType_Video data is video based, such as a collection of movie clips featuring Tom Hanks.
var DatasetType_Video = DatasetType{
	id: "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/video",
}

type AnyDictionaryEntry interface {
	asDictionaryEntry() *DictionaryEntry
}

// DictionaryEntry A key with an associated value.
type DictionaryEntry struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	ID string  `iri:"@id"`
	// Value A value used in a generic key-value pair.
	Value string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/value" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Key A key used in a generic key-value pair.
	Key string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/key" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *DictionaryEntry) asDictionaryEntry() *DictionaryEntry {
	return o
}

type DictionaryEntryList []AnyDictionaryEntry

func (o *DictionaryEntryList) DictionaryEntries() ld.TypeSeq[AnyDictionaryEntry, *DictionaryEntry] {
	return ld.NewTypeSeq(*o, castDictionaryEntry)
}

type AnyDisjunctiveLicenseSet interface {
	asDisjunctiveLicenseSet() *DisjunctiveLicenseSet
}

// DisjunctiveLicenseSet Portion of an AnyLicenseInfo representing a set of licensing information where\nonly one of the elements applies.
type DisjunctiveLicenseSet struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/DisjunctiveLicenseSet"`
	LicenseInfo
	// Members A license expression participating in a license set.
	Members LicenseInfoList `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/member" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/AnyLicenseInfo"`
}

func (o *DisjunctiveLicenseSet) asDisjunctiveLicenseSet() *DisjunctiveLicenseSet {
	return o
}

type DisjunctiveLicenseSetList []AnyDisjunctiveLicenseSet

func (o *DisjunctiveLicenseSetList) DisjunctiveLicenseSets() ld.TypeSeq[AnyDisjunctiveLicenseSet, *DisjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castDisjunctiveLicenseSet)
}

type AnyElement interface {
	asElement() *Element
}

// Element Base domain class from which all other SPDX-3.0 domain classes derive.
type Element struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	ID string  `iri:"@id"`
	// Description Provides a detailed description of the Element.
	Description string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/description" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Comment Provide consumers with comments by the creator of the Element about the\nElement.
	Comment string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/comment" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Name Identifies the name of an Element as designated by the creator.
	Name string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/name" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Extensions Specifies an Extension characterization of some aspect of an Element.
	Extensions []Extension `iri:"https://spdx.org/rdf/3.0.1/terms/Core/extension" type:"https://spdx.org/rdf/3.0.1/terms/Extension/Extension"`
	// CreationInfo Provides information about the creation of the Element.
	CreationInfo AnyCreationInfo `iri:"https://spdx.org/rdf/3.0.1/terms/Core/creationInfo" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/CreationInfo"`
	// ExternalIdentifiers Provides a reference to a resource outside the scope of SPDX-3.0 content\nthat uniquely identifies an Element.
	ExternalIdentifiers ExternalIdentifierList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/externalIdentifier" type:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifier"`
	// ExternalRefs Points to a resource outside the scope of the SPDX-3.0 content\nthat provides additional characteristics of an Element.
	ExternalRefs ExternalRefList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/externalRef" type:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalRef"`
	// Summary A short description of an Element.
	Summary string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/summary" type:"http://www.w3.org/2001/XMLSchema#string"`
	// VerifiedUsings Provides an IntegrityMethod with which the integrity of an Element can be\nasserted.
	VerifiedUsings IntegrityMethodList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/verifiedUsing" type:"https://spdx.org/rdf/3.0.1/terms/Core/IntegrityMethod"`
}

func (o *Element) asElement() *Element {
	return o
}

type ElementList []AnyElement

func (o *ElementList) AIPackages() ld.TypeSeq[AnyElement, *AIPackage] {
	return ld.NewTypeSeq(*o, castAIPackage)
}

func (o *ElementList) Agents() ld.TypeSeq[AnyElement, *Agent] {
	return ld.NewTypeSeq(*o, castAgent)
}

func (o *ElementList) Annotations() ld.TypeSeq[AnyElement, *Annotation] {
	return ld.NewTypeSeq(*o, castAnnotation)
}

func (o *ElementList) Artifacts() ld.TypeSeq[AnyElement, *Artifact] {
	return ld.NewTypeSeq(*o, castArtifact)
}

func (o *ElementList) Boms() ld.TypeSeq[AnyElement, *Bom] {
	return ld.NewTypeSeq(*o, castBom)
}

func (o *ElementList) Builds() ld.TypeSeq[AnyElement, *Build] {
	return ld.NewTypeSeq(*o, castBuild)
}

func (o *ElementList) Bundles() ld.TypeSeq[AnyElement, *Bundle] {
	return ld.NewTypeSeq(*o, castBundle)
}

func (o *ElementList) ConjunctiveLicenseSets() ld.TypeSeq[AnyElement, *ConjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castConjunctiveLicenseSet)
}

func (o *ElementList) CustomLicenses() ld.TypeSeq[AnyElement, *CustomLicense] {
	return ld.NewTypeSeq(*o, castCustomLicense)
}

func (o *ElementList) CustomLicenseAdditions() ld.TypeSeq[AnyElement, *CustomLicenseAddition] {
	return ld.NewTypeSeq(*o, castCustomLicenseAddition)
}

func (o *ElementList) CvssV2VulnAssessmentRelationships() ld.TypeSeq[AnyElement, *CvssV2VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV2VulnAssessmentRelationship)
}

func (o *ElementList) CvssV3VulnAssessmentRelationships() ld.TypeSeq[AnyElement, *CvssV3VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV3VulnAssessmentRelationship)
}

func (o *ElementList) CvssV4VulnAssessmentRelationships() ld.TypeSeq[AnyElement, *CvssV4VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV4VulnAssessmentRelationship)
}

func (o *ElementList) DatasetPackages() ld.TypeSeq[AnyElement, *DatasetPackage] {
	return ld.NewTypeSeq(*o, castDatasetPackage)
}

func (o *ElementList) DisjunctiveLicenseSets() ld.TypeSeq[AnyElement, *DisjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castDisjunctiveLicenseSet)
}

func (o *ElementList) Elements() ld.TypeSeq[AnyElement, *Element] {
	return ld.NewTypeSeq(*o, castElement)
}

func (o *ElementList) ElementCollections() ld.TypeSeq[AnyElement, *ElementCollection] {
	return ld.NewTypeSeq(*o, castElementCollection)
}

func (o *ElementList) EpssVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *EpssVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castEpssVulnAssessmentRelationship)
}

func (o *ElementList) ExploitCatalogVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *ExploitCatalogVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castExploitCatalogVulnAssessmentRelationship)
}

func (o *ElementList) ExtendableLicenses() ld.TypeSeq[AnyElement, *ExtendableLicense] {
	return ld.NewTypeSeq(*o, castExtendableLicense)
}

func (o *ElementList) Files() ld.TypeSeq[AnyElement, *File] {
	return ld.NewTypeSeq(*o, castFile)
}

func (o *ElementList) IndividualElements() ld.TypeSeq[AnyElement, *IndividualElement] {
	return ld.NewTypeSeq(*o, castIndividualElement)
}

func (o *ElementList) IndividualLicensingInfos() ld.TypeSeq[AnyElement, *IndividualLicensingInfo] {
	return ld.NewTypeSeq(*o, castIndividualLicensingInfo)
}

func (o *ElementList) Licenses() ld.TypeSeq[AnyElement, *License] {
	return ld.NewTypeSeq(*o, castLicense)
}

func (o *ElementList) LicenseAdditions() ld.TypeSeq[AnyElement, *LicenseAddition] {
	return ld.NewTypeSeq(*o, castLicenseAddition)
}

func (o *ElementList) LicenseExpressions() ld.TypeSeq[AnyElement, *LicenseExpression] {
	return ld.NewTypeSeq(*o, castLicenseExpression)
}

func (o *ElementList) LicenseInfos() ld.TypeSeq[AnyElement, *LicenseInfo] {
	return ld.NewTypeSeq(*o, castLicenseInfo)
}

func (o *ElementList) LifecycleScopedRelationships() ld.TypeSeq[AnyElement, *LifecycleScopedRelationship] {
	return ld.NewTypeSeq(*o, castLifecycleScopedRelationship)
}

func (o *ElementList) ListedLicenses() ld.TypeSeq[AnyElement, *ListedLicense] {
	return ld.NewTypeSeq(*o, castListedLicense)
}

func (o *ElementList) ListedLicenseExceptions() ld.TypeSeq[AnyElement, *ListedLicenseException] {
	return ld.NewTypeSeq(*o, castListedLicenseException)
}

func (o *ElementList) OrLaterOperators() ld.TypeSeq[AnyElement, *OrLaterOperator] {
	return ld.NewTypeSeq(*o, castOrLaterOperator)
}

func (o *ElementList) Organizations() ld.TypeSeq[AnyElement, *Organization] {
	return ld.NewTypeSeq(*o, castOrganization)
}

func (o *ElementList) Packages() ld.TypeSeq[AnyElement, *Package] {
	return ld.NewTypeSeq(*o, castPackage)
}

func (o *ElementList) People() ld.TypeSeq[AnyElement, *Person] {
	return ld.NewTypeSeq(*o, castPerson)
}

func (o *ElementList) Relationships() ld.TypeSeq[AnyElement, *Relationship] {
	return ld.NewTypeSeq(*o, castRelationship)
}

func (o *ElementList) Sboms() ld.TypeSeq[AnyElement, *Sbom] {
	return ld.NewTypeSeq(*o, castSbom)
}

func (o *ElementList) SimpleLicensingTexts() ld.TypeSeq[AnyElement, *SimpleLicensingText] {
	return ld.NewTypeSeq(*o, castSimpleLicensingText)
}

func (o *ElementList) Snippets() ld.TypeSeq[AnyElement, *Snippet] {
	return ld.NewTypeSeq(*o, castSnippet)
}

func (o *ElementList) SoftwareAgents() ld.TypeSeq[AnyElement, *SoftwareAgent] {
	return ld.NewTypeSeq(*o, castSoftwareAgent)
}

func (o *ElementList) SoftwareArtifacts() ld.TypeSeq[AnyElement, *SoftwareArtifact] {
	return ld.NewTypeSeq(*o, castSoftwareArtifact)
}

func (o *ElementList) SpdxDocuments() ld.TypeSeq[AnyElement, *SpdxDocument] {
	return ld.NewTypeSeq(*o, castSpdxDocument)
}

func (o *ElementList) SsvcVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *SsvcVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castSsvcVulnAssessmentRelationship)
}

func (o *ElementList) Tools() ld.TypeSeq[AnyElement, *Tool] {
	return ld.NewTypeSeq(*o, castTool)
}

func (o *ElementList) VexAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VexAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexAffectedVulnAssessmentRelationship)
}

func (o *ElementList) VexFixedVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VexFixedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexFixedVulnAssessmentRelationship)
}

func (o *ElementList) VexNotAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VexNotAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexNotAffectedVulnAssessmentRelationship)
}

func (o *ElementList) VexUnderInvestigationVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VexUnderInvestigationVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexUnderInvestigationVulnAssessmentRelationship)
}

func (o *ElementList) VexVulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VexVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexVulnAssessmentRelationship)
}

func (o *ElementList) VulnAssessmentRelationships() ld.TypeSeq[AnyElement, *VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVulnAssessmentRelationship)
}

func (o *ElementList) Vulnerabilities() ld.TypeSeq[AnyElement, *Vulnerability] {
	return ld.NewTypeSeq(*o, castVulnerability)
}

func (o *ElementList) WithAdditionOperators() ld.TypeSeq[AnyElement, *WithAdditionOperator] {
	return ld.NewTypeSeq(*o, castWithAdditionOperator)
}

type AnyElementCollection interface {
	asElementCollection() *ElementCollection
}

// ElementCollection A collection of Elements, not necessarily with unifying context.
type ElementCollection struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ElementCollection"`
	Element
	// Elements Refers to one or more Elements that are part of an ElementCollection.
	Elements ElementList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/element" type:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	// RootElements This property is used to denote the root Element(s) of a tree of elements contained in a BOM.
	RootElements ElementList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/rootElement" type:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	// ProfileConformances Describes one a profile which the creator of this ElementCollection intends to\nconform to.
	ProfileConformances []ProfileIdentifierType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/profileConformance" type:"https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType"`
}

func (o *ElementCollection) asElementCollection() *ElementCollection {
	return o
}

type ElementCollectionList []AnyElementCollection

func (o *ElementCollectionList) Boms() ld.TypeSeq[AnyElementCollection, *Bom] {
	return ld.NewTypeSeq(*o, castBom)
}

func (o *ElementCollectionList) Bundles() ld.TypeSeq[AnyElementCollection, *Bundle] {
	return ld.NewTypeSeq(*o, castBundle)
}

func (o *ElementCollectionList) ElementCollections() ld.TypeSeq[AnyElementCollection, *ElementCollection] {
	return ld.NewTypeSeq(*o, castElementCollection)
}

func (o *ElementCollectionList) Sboms() ld.TypeSeq[AnyElementCollection, *Sbom] {
	return ld.NewTypeSeq(*o, castSbom)
}

func (o *ElementCollectionList) SpdxDocuments() ld.TypeSeq[AnyElementCollection, *SpdxDocument] {
	return ld.NewTypeSeq(*o, castSpdxDocument)
}

type AnyEnergyConsumption interface {
	asEnergyConsumption() *EnergyConsumption
}

// EnergyConsumption A class for describing the energy consumption incurred by an AI model in\ndifferent stages of its lifecycle.
type EnergyConsumption struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumption"`
	ID string  `iri:"@id"`
	// InferenceEnergyConsumptions Specifies the amount of energy consumed during inference time by an AI model\nthat is being used in the AI system.
	InferenceEnergyConsumptions EnergyConsumptionDescriptionList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/inferenceEnergyConsumption" type:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumptionDescription"`
	// TrainingEnergyConsumptions Specifies the amount of energy consumed when training the AI model that is\nbeing used in the AI system.
	TrainingEnergyConsumptions EnergyConsumptionDescriptionList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/trainingEnergyConsumption" type:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumptionDescription"`
	// FinetuningEnergyConsumptions Specifies the amount of energy consumed when finetuning the AI model that is\nbeing used in the AI system.
	FinetuningEnergyConsumptions EnergyConsumptionDescriptionList `iri:"https://spdx.org/rdf/3.0.1/terms/AI/finetuningEnergyConsumption" type:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumptionDescription"`
}

func (o *EnergyConsumption) asEnergyConsumption() *EnergyConsumption {
	return o
}

type EnergyConsumptionList []AnyEnergyConsumption

func (o *EnergyConsumptionList) EnergyConsumptions() ld.TypeSeq[AnyEnergyConsumption, *EnergyConsumption] {
	return ld.NewTypeSeq(*o, castEnergyConsumption)
}

type AnyEnergyConsumptionDescription interface {
	asEnergyConsumptionDescription() *EnergyConsumptionDescription
}

// EnergyConsumptionDescription The class that helps note down the quantity of energy consumption and the unit\nused for measurement.
type EnergyConsumptionDescription struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumptionDescription"`
	ID string  `iri:"@id"`
	// EnergyQuantity Represents the energy quantity.
	EnergyQuantity float64 `iri:"https://spdx.org/rdf/3.0.1/terms/AI/energyQuantity" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
	// EnergyUnit Specifies the unit in which energy is measured.
	EnergyUnit EnergyUnitType `iri:"https://spdx.org/rdf/3.0.1/terms/AI/energyUnit" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType"`
}

func (o *EnergyConsumptionDescription) asEnergyConsumptionDescription() *EnergyConsumptionDescription {
	return o
}

type EnergyConsumptionDescriptionList []AnyEnergyConsumptionDescription

func (o *EnergyConsumptionDescriptionList) EnergyConsumptionDescriptions() ld.TypeSeq[AnyEnergyConsumptionDescription, *EnergyConsumptionDescription] {
	return ld.NewTypeSeq(*o, castEnergyConsumptionDescription)
}

// EnergyUnitType Specifies the unit of energy consumption.
type EnergyUnitType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType"`
	id string  `iri:"@id"`
}

// EnergyUnitType_KilowattHour Kilowatt-hour.
var EnergyUnitType_KilowattHour = EnergyUnitType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType/kilowattHour",
}

// EnergyUnitType_Megajoule Megajoule.
var EnergyUnitType_Megajoule = EnergyUnitType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType/megajoule",
}

// EnergyUnitType_Other Any other units of energy measurement.
var EnergyUnitType_Other = EnergyUnitType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType/other",
}

type AnyEpssVulnAssessmentRelationship interface {
	asEpssVulnAssessmentRelationship() *EpssVulnAssessmentRelationship
}

// EpssVulnAssessmentRelationship Provides an EPSS assessment for a vulnerability.
type EpssVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/EpssVulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// Probability A probability score between 0 and 1 of a vulnerability being exploited.
	Probability float64 `iri:"https://spdx.org/rdf/3.0.1/terms/Security/probability" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
	// Percentile The percentile of the current probability score.
	Percentile float64 `iri:"https://spdx.org/rdf/3.0.1/terms/Security/percentile" required:"true" type:"http://www.w3.org/2001/XMLSchema#decimal"`
}

func (o *EpssVulnAssessmentRelationship) asEpssVulnAssessmentRelationship() *EpssVulnAssessmentRelationship {
	return o
}

type EpssVulnAssessmentRelationshipList []AnyEpssVulnAssessmentRelationship

func (o *EpssVulnAssessmentRelationshipList) EpssVulnAssessmentRelationships() ld.TypeSeq[AnyEpssVulnAssessmentRelationship, *EpssVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castEpssVulnAssessmentRelationship)
}

// ExploitCatalogType Specifies the exploit catalog type.
type ExploitCatalogType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType"`
	id string  `iri:"@id"`
}

// ExploitCatalogType_Kev CISA's Known Exploited Vulnerability (KEV) Catalog
var ExploitCatalogType_Kev = ExploitCatalogType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType/kev",
}

// ExploitCatalogType_Other Other exploit catalogs
var ExploitCatalogType_Other = ExploitCatalogType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType/other",
}

type AnyExploitCatalogVulnAssessmentRelationship interface {
	asExploitCatalogVulnAssessmentRelationship() *ExploitCatalogVulnAssessmentRelationship
}

// ExploitCatalogVulnAssessmentRelationship Provides an exploit assessment of a vulnerability.
type ExploitCatalogVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogVulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// Locator Provides the location of an exploit catalog.
	Locator ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Security/locator" required:"true" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// Exploited Describe that a CVE is known to have an exploit because it's been listed in an exploit catalog.
	Exploited bool `iri:"https://spdx.org/rdf/3.0.1/terms/Security/exploited" required:"true" type:"http://www.w3.org/2001/XMLSchema#boolean"`
	// CatalogType Specifies the exploit catalog type.
	CatalogType ExploitCatalogType `iri:"https://spdx.org/rdf/3.0.1/terms/Security/catalogType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType"`
}

func (o *ExploitCatalogVulnAssessmentRelationship) asExploitCatalogVulnAssessmentRelationship() *ExploitCatalogVulnAssessmentRelationship {
	return o
}

type ExploitCatalogVulnAssessmentRelationshipList []AnyExploitCatalogVulnAssessmentRelationship

func (o *ExploitCatalogVulnAssessmentRelationshipList) ExploitCatalogVulnAssessmentRelationships() ld.TypeSeq[AnyExploitCatalogVulnAssessmentRelationship, *ExploitCatalogVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castExploitCatalogVulnAssessmentRelationship)
}

type AnyExtendableLicense interface {
	asExtendableLicense() *ExtendableLicense
}

// ExtendableLicense Abstract class representing a License or an OrLaterOperator.
type ExtendableLicense struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ExtendableLicense"`
	LicenseInfo
}

func (o *ExtendableLicense) asExtendableLicense() *ExtendableLicense {
	return o
}

type ExtendableLicenseList []AnyExtendableLicense

func (o *ExtendableLicenseList) CustomLicenses() ld.TypeSeq[AnyExtendableLicense, *CustomLicense] {
	return ld.NewTypeSeq(*o, castCustomLicense)
}

func (o *ExtendableLicenseList) ExtendableLicenses() ld.TypeSeq[AnyExtendableLicense, *ExtendableLicense] {
	return ld.NewTypeSeq(*o, castExtendableLicense)
}

func (o *ExtendableLicenseList) Licenses() ld.TypeSeq[AnyExtendableLicense, *License] {
	return ld.NewTypeSeq(*o, castLicense)
}

func (o *ExtendableLicenseList) ListedLicenses() ld.TypeSeq[AnyExtendableLicense, *ListedLicense] {
	return ld.NewTypeSeq(*o, castListedLicense)
}

func (o *ExtendableLicenseList) OrLaterOperators() ld.TypeSeq[AnyExtendableLicense, *OrLaterOperator] {
	return ld.NewTypeSeq(*o, castOrLaterOperator)
}

// Extension A characterization of some aspect of an Element that is associated with the Element in a generalized fashion.
type Extension struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Extension/Extension"`
	id string  `iri:"@id"`
}
type AnyExternalIdentifier interface {
	asExternalIdentifier() *ExternalIdentifier
}

// ExternalIdentifier A reference to a resource identifier defined outside the scope of SPDX-3.0 content that uniquely identifies an Element.
type ExternalIdentifier struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifier"`
	ID string  `iri:"@id"`
	// Identifier Uniquely identifies an external element.
	Identifier string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/identifier" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// IssuingAuthority An entity that is authorized to issue identification credentials.
	IssuingAuthority string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/issuingAuthority" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Comment Provide consumers with comments by the creator of the Element about the\nElement.
	Comment string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/comment" type:"http://www.w3.org/2001/XMLSchema#string"`
	// IdentifierLocators Provides the location for more information regarding an external identifier.
	IdentifierLocators []ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Core/identifierLocator" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// ExternalIdentifierType Specifies the type of the external identifier.
	ExternalIdentifierType ExternalIdentifierType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/externalIdentifierType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType"`
}

func (o *ExternalIdentifier) asExternalIdentifier() *ExternalIdentifier {
	return o
}

type ExternalIdentifierList []AnyExternalIdentifier

func (o *ExternalIdentifierList) ExternalIdentifiers() ld.TypeSeq[AnyExternalIdentifier, *ExternalIdentifier] {
	return ld.NewTypeSeq(*o, castExternalIdentifier)
}

// ExternalIdentifierType Specifies the type of an external identifier.
type ExternalIdentifierType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType"`
	id string  `iri:"@id"`
}

// ExternalIdentifierType_Cpe22 [Common Platform Enumeration Specification 2.2](https://cpe.mitre.org/files/cpe-specification_2.2.pdf)
var ExternalIdentifierType_Cpe22 = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/cpe22",
}

// ExternalIdentifierType_Cpe23 [Common Platform Enumeration: Naming Specification Version 2.3](https://csrc.nist.gov/publications/detail/nistir/7695/final)
var ExternalIdentifierType_Cpe23 = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/cpe23",
}

// ExternalIdentifierType_Cve Common Vulnerabilities and Exposures identifiers, an identifier for a specific software flaw defined within the official CVE Dictionary and that conforms to the [CVE specification](https://csrc.nist.gov/glossary/term/cve_id).
var ExternalIdentifierType_Cve = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/cve",
}

// ExternalIdentifierType_Email Email address, as defined in [RFC 3696](https://datatracker.ietf.org/doc/rfc3986/) Section 3.
var ExternalIdentifierType_Email = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/email",
}

// ExternalIdentifierType_Gitoid [Gitoid](https://www.iana.org/assignments/uri-schemes/prov/gitoid), stands for [Git Object ID](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects). A gitoid of type blob is a unique hash of a binary artifact. A gitoid may represent either an [Artifact Identifier](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-identifier-types) for the software artifact or an [Input Manifest Identifier](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#input-manifest-identifier) for the software artifact's associated [Artifact Input Manifest](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-input-manifest); this ambiguity exists because the Artifact Input Manifest is itself an artifact, and the gitoid of that artifact is its valid identifier. Gitoids calculated on software artifacts (Snippet, File, or Package Elements) should be recorded in the SPDX 3.0 SoftwareArtifact's contentIdentifier property. Gitoids calculated on the Artifact Input Manifest (Input Manifest Identifier) should be recorded in the SPDX 3.0 Element's externalIdentifier property. See [OmniBOR Specification](https://github.com/omnibor/spec/), a minimalistic specification for describing software [Artifact Dependency Graphs](https://github.com/omnibor/spec/blob/eb1ee5c961c16215eb8709b2975d193a2007a35d/spec/SPEC.md#artifact-dependency-graph-adg).
var ExternalIdentifierType_Gitoid = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/gitoid",
}

// ExternalIdentifierType_Other Used when the type does not match any of the other options.
var ExternalIdentifierType_Other = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/other",
}

// ExternalIdentifierType_PackageUrl Package URL, as defined in the corresponding [Annex](../../../annexes/pkg-url-specification.md) of this specification.
var ExternalIdentifierType_PackageUrl = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/packageUrl",
}

// ExternalIdentifierType_SecurityOther Used when there is a security related identifier of unspecified type.
var ExternalIdentifierType_SecurityOther = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/securityOther",
}

// ExternalIdentifierType_Swhid SoftWare Hash IDentifier, a persistent intrinsic identifier for digital artifacts, such as files, trees (also known as directories or folders), commits, and other objects typically found in version control systems. The format of the identifiers is defined in the [SWHID specification](https://www.swhid.org/specification/v1.1/4.Syntax) (ISO/IEC DIS 18670). They typically look like `swh:1:cnt:94a9ed024d3859793618152ea559a168bbcbb5e2`.
var ExternalIdentifierType_Swhid = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/swhid",
}

// ExternalIdentifierType_Swid Concise Software Identification (CoSWID) tag, as defined in [RFC 9393](https://datatracker.ietf.org/doc/rfc9393/) Section 2.3.
var ExternalIdentifierType_Swid = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/swid",
}

// ExternalIdentifierType_UrlScheme [Uniform Resource Identifier (URI) Schemes](https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml). The scheme used in order to locate a resource.
var ExternalIdentifierType_UrlScheme = ExternalIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/urlScheme",
}

type AnyExternalMap interface {
	asExternalMap() *ExternalMap
}

// ExternalMap A map of Element identifiers that are used within an SpdxDocument but defined\nexternal to that SpdxDocument.
type ExternalMap struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalMap"`
	ID string  `iri:"@id"`
	// ExternalSpdxId Identifies an external Element used within an SpdxDocument but defined\nexternal to that SpdxDocument.
	ExternalSpdxId ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Core/externalSpdxId" required:"true" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// LocationHint Provides an indication of where to retrieve an external Element.
	LocationHint ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Core/locationHint" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// VerifiedUsings Provides an IntegrityMethod with which the integrity of an Element can be\nasserted.
	VerifiedUsings IntegrityMethodList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/verifiedUsing" type:"https://spdx.org/rdf/3.0.1/terms/Core/IntegrityMethod"`
	// DefiningArtifact Artifact representing a serialization instance of SPDX data containing the\ndefinition of a particular Element.
	DefiningArtifact AnyArtifact `iri:"https://spdx.org/rdf/3.0.1/terms/Core/definingArtifact" type:"https://spdx.org/rdf/3.0.1/terms/Core/Artifact"`
}

func (o *ExternalMap) asExternalMap() *ExternalMap {
	return o
}

type ExternalMapList []AnyExternalMap

func (o *ExternalMapList) ExternalMaps() ld.TypeSeq[AnyExternalMap, *ExternalMap] {
	return ld.NewTypeSeq(*o, castExternalMap)
}

type AnyExternalRef interface {
	asExternalRef() *ExternalRef
}

// ExternalRef A reference to a resource outside the scope of SPDX-3.0 content related to an Element.
type ExternalRef struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalRef"`
	ID string  `iri:"@id"`
	// Locators Provides the location of an external reference.
	Locators []string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/locator" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ContentType Provides information about the content type of an Element or a Property.
	ContentType string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/contentType" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ExternalRefType Specifies the type of the external reference.
	ExternalRefType ExternalRefType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/externalRefType" type:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType"`
	// Comment Provide consumers with comments by the creator of the Element about the\nElement.
	Comment string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/comment" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *ExternalRef) asExternalRef() *ExternalRef {
	return o
}

type ExternalRefList []AnyExternalRef

func (o *ExternalRefList) ExternalRefs() ld.TypeSeq[AnyExternalRef, *ExternalRef] {
	return ld.NewTypeSeq(*o, castExternalRef)
}

// ExternalRefType Specifies the type of an external reference.
type ExternalRefType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType"`
	id string  `iri:"@id"`
}

// ExternalRefType_AltDownloadLocation A reference to an alternative download location.
var ExternalRefType_AltDownloadLocation = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/altDownloadLocation",
}

// ExternalRefType_AltWebPage A reference to an alternative web page.
var ExternalRefType_AltWebPage = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/altWebPage",
}

// ExternalRefType_BinaryArtifact A reference to binary artifacts related to a package.
var ExternalRefType_BinaryArtifact = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/binaryArtifact",
}

// ExternalRefType_Bower A reference to a Bower package. The package locator format, looks like `package#version`, is defined in the \"install\" section of [Bower API documentation](https://bower.io/docs/api/#install).
var ExternalRefType_Bower = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/bower",
}

// ExternalRefType_BuildMeta A reference build metadata related to a published package.
var ExternalRefType_BuildMeta = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/buildMeta",
}

// ExternalRefType_BuildSystem A reference build system used to create or publish the package.
var ExternalRefType_BuildSystem = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/buildSystem",
}

// ExternalRefType_CertificationReport A reference to a certification report for a package from an accredited/independent body.
var ExternalRefType_CertificationReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/certificationReport",
}

// ExternalRefType_Chat A reference to the instant messaging system used by the maintainer for a package.
var ExternalRefType_Chat = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/chat",
}

// ExternalRefType_ComponentAnalysisReport A reference to a Software Composition Analysis (SCA) report.
var ExternalRefType_ComponentAnalysisReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/componentAnalysisReport",
}

// ExternalRefType_Cwe [Common Weakness Enumeration](https://csrc.nist.gov/glossary/term/common_weakness_enumeration). A reference to a source of software flaw defined within the official [CWE List](https://cwe.mitre.org/data/) that conforms to the [CWE specification](https://cwe.mitre.org/).
var ExternalRefType_Cwe = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/cwe",
}

// ExternalRefType_Documentation A reference to the documentation for a package.
var ExternalRefType_Documentation = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/documentation",
}

// ExternalRefType_DynamicAnalysisReport A reference to a dynamic analysis report for a package.
var ExternalRefType_DynamicAnalysisReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/dynamicAnalysisReport",
}

// ExternalRefType_EolNotice A reference to the End Of Sale (EOS) and/or End Of Life (EOL) information related to a package.
var ExternalRefType_EolNotice = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/eolNotice",
}

// ExternalRefType_ExportControlAssessment A reference to a export control assessment for a package.
var ExternalRefType_ExportControlAssessment = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/exportControlAssessment",
}

// ExternalRefType_Funding A reference to funding information related to a package.
var ExternalRefType_Funding = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/funding",
}

// ExternalRefType_IssueTracker A reference to the issue tracker for a package.
var ExternalRefType_IssueTracker = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/issueTracker",
}

// ExternalRefType_License A reference to additional license information related to an artifact.
var ExternalRefType_License = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/license",
}

// ExternalRefType_MailingList A reference to the mailing list used by the maintainer for a package.
var ExternalRefType_MailingList = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/mailingList",
}

// ExternalRefType_MavenCentral A reference to a Maven repository artifact. The artifact locator format is defined in the [Maven documentation](https://maven.apache.org/guides/mini/guide-naming-conventions.html) and looks like `groupId:artifactId[:version]`.
var ExternalRefType_MavenCentral = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/mavenCentral",
}

// ExternalRefType_Metrics A reference to metrics related to package such as OpenSSF scorecards.
var ExternalRefType_Metrics = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/metrics",
}

// ExternalRefType_Npm A reference to an npm package. The package locator format is defined in the [npm documentation](https://docs.npmjs.com/cli/v10/configuring-npm/package-json) and looks like `package@version`.
var ExternalRefType_Npm = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/npm",
}

// ExternalRefType_Nuget A reference to a NuGet package. The package locator format is defined in the [NuGet documentation](https://docs.nuget.org) and looks like `package/version`.
var ExternalRefType_Nuget = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/nuget",
}

// ExternalRefType_Other Used when the type does not match any of the other options.
var ExternalRefType_Other = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/other",
}

// ExternalRefType_PrivacyAssessment A reference to a privacy assessment for a package.
var ExternalRefType_PrivacyAssessment = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/privacyAssessment",
}

// ExternalRefType_ProductMetadata A reference to additional product metadata such as reference within organization's product catalog.
var ExternalRefType_ProductMetadata = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/productMetadata",
}

// ExternalRefType_PurchaseOrder A reference to a purchase order for a package.
var ExternalRefType_PurchaseOrder = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/purchaseOrder",
}

// ExternalRefType_QualityAssessmentReport A reference to a quality assessment for a package.
var ExternalRefType_QualityAssessmentReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/qualityAssessmentReport",
}

// ExternalRefType_ReleaseHistory A reference to a published list of releases for a package.
var ExternalRefType_ReleaseHistory = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/releaseHistory",
}

// ExternalRefType_ReleaseNotes A reference to the release notes for a package.
var ExternalRefType_ReleaseNotes = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/releaseNotes",
}

// ExternalRefType_RiskAssessment A reference to a risk assessment for a package.
var ExternalRefType_RiskAssessment = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/riskAssessment",
}

// ExternalRefType_RuntimeAnalysisReport A reference to a runtime analysis report for a package.
var ExternalRefType_RuntimeAnalysisReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/runtimeAnalysisReport",
}

// ExternalRefType_SecureSoftwareAttestation A reference to information assuring that the software is developed using security practices as defined by [NIST SP 800-218 Secure Software Development Framework (SSDF) Version 1.1](https://csrc.nist.gov/pubs/sp/800/218/final) or [CISA Secure Software Development Attestation Form](https://www.cisa.gov/resources-tools/resources/secure-software-development-attestation-form).
var ExternalRefType_SecureSoftwareAttestation = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/secureSoftwareAttestation",
}

// ExternalRefType_SecurityAdversaryModel A reference to the security adversary model for a package.
var ExternalRefType_SecurityAdversaryModel = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityAdversaryModel",
}

// ExternalRefType_SecurityAdvisory A reference to a published security advisory (where advisory as defined per [ISO 29147:2018](https://www.iso.org/standard/72311.html)) that may affect one or more elements, e.g., vendor advisories or specific NVD entries.
var ExternalRefType_SecurityAdvisory = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityAdvisory",
}

// ExternalRefType_SecurityFix A reference to the patch or source code that fixes a vulnerability.
var ExternalRefType_SecurityFix = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityFix",
}

// ExternalRefType_SecurityOther A reference to related security information of unspecified type.
var ExternalRefType_SecurityOther = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityOther",
}

// ExternalRefType_SecurityPenTestReport A reference to a [penetration test](https://en.wikipedia.org/wiki/Penetration_test) report for a package.
var ExternalRefType_SecurityPenTestReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityPenTestReport",
}

// ExternalRefType_SecurityPolicy A reference to instructions for reporting newly discovered security vulnerabilities for a package.
var ExternalRefType_SecurityPolicy = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityPolicy",
}

// ExternalRefType_SecurityThreatModel A reference the [security threat model](https://en.wikipedia.org/wiki/Threat_model) for a package.
var ExternalRefType_SecurityThreatModel = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/securityThreatModel",
}

// ExternalRefType_SocialMedia A reference to a social media channel for a package.
var ExternalRefType_SocialMedia = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/socialMedia",
}

// ExternalRefType_SourceArtifact A reference to an artifact containing the sources for a package.
var ExternalRefType_SourceArtifact = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/sourceArtifact",
}

// ExternalRefType_StaticAnalysisReport A reference to a static analysis report for a package.
var ExternalRefType_StaticAnalysisReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/staticAnalysisReport",
}

// ExternalRefType_Support A reference to the software support channel or other support information for a package.
var ExternalRefType_Support = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/support",
}

// ExternalRefType_Vcs A reference to a version control system related to a software artifact.
var ExternalRefType_Vcs = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/vcs",
}

// ExternalRefType_VulnerabilityDisclosureReport A reference to a Vulnerability Disclosure Report (VDR) which provides the software supplier's analysis and findings describing the impact (or lack of impact) that reported vulnerabilities have on packages or products in the supplier's SBOM as defined in [NIST SP 800-161 Cybersecurity Supply Chain Risk Management Practices for Systems and Organizations](https://csrc.nist.gov/pubs/sp/800/161/r1/final).
var ExternalRefType_VulnerabilityDisclosureReport = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/vulnerabilityDisclosureReport",
}

// ExternalRefType_VulnerabilityExploitabilityAssessment A reference to a Vulnerability Exploitability eXchange (VEX) statement which provides information on whether a product is impacted by a specific vulnerability in an included package and, if affected, whether there are actions recommended to remediate. See also [NTIA VEX one-page summary](https://ntia.gov/files/ntia/publications/vex_one-page_summary.pdf).
var ExternalRefType_VulnerabilityExploitabilityAssessment = ExternalRefType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/vulnerabilityExploitabilityAssessment",
}

type AnyFile interface {
	asFile() *File
}

// File Refers to any object that stores content on a computer.
type File struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/File"`
	SoftwareArtifact
	// ContentType Provides information about the content type of an Element or a Property.
	ContentType string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/contentType" type:"http://www.w3.org/2001/XMLSchema#string"`
	// FileKind Describes if a given file is a directory or non-directory kind of file.
	FileKind FileKindType `iri:"https://spdx.org/rdf/3.0.1/terms/Software/fileKind" type:"https://spdx.org/rdf/3.0.1/terms/Software/FileKindType"`
}

func (o *File) asFile() *File {
	return o
}

type FileList []AnyFile

func (o *FileList) Files() ld.TypeSeq[AnyFile, *File] {
	return ld.NewTypeSeq(*o, castFile)
}

// FileKindType Enumeration of the different kinds of SPDX file.
type FileKindType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/FileKindType"`
	id string  `iri:"@id"`
}

// FileKindType_Directory The file represents a directory and all content stored in that directory.
var FileKindType_Directory = FileKindType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/FileKindType/directory",
}

// FileKindType_File The file represents a single file (default).
var FileKindType_File = FileKindType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/FileKindType/file",
}

type AnyHash interface {
	asHash() *Hash
}

// Hash A mathematically calculated representation of a grouping of data.
type Hash struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Hash"`
	IntegrityMethod
	// HashValue The result of applying a hash algorithm to an Element.
	HashValue string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/hashValue" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// Algorithm Specifies the algorithm used for calculating the hash value.
	Algorithm HashAlgorithm `iri:"https://spdx.org/rdf/3.0.1/terms/Core/algorithm" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm"`
}

func (o *Hash) asHash() *Hash {
	return o
}

type HashList []AnyHash

func (o *HashList) Hashes() ld.TypeSeq[AnyHash, *Hash] {
	return ld.NewTypeSeq(*o, castHash)
}

// HashAlgorithm A mathematical algorithm that maps data of arbitrary size to a bit string.
type HashAlgorithm struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm"`
	id string  `iri:"@id"`
}

// HashAlgorithm_Adler32 Adler-32 checksum is part of the widely used zlib compression library as defined in [RFC 1950](https://datatracker.ietf.org/doc/rfc1950/) Section 2.3.
var HashAlgorithm_Adler32 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/adler32",
}

// HashAlgorithm_Blake2b256 BLAKE2b algorithm with a digest size of 256, as defined in [RFC 7693](https://datatracker.ietf.org/doc/rfc7693/) Section 4.
var HashAlgorithm_Blake2b256 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/blake2b256",
}

// HashAlgorithm_Blake2b384 BLAKE2b algorithm with a digest size of 384, as defined in [RFC 7693](https://datatracker.ietf.org/doc/rfc7693/) Section 4.
var HashAlgorithm_Blake2b384 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/blake2b384",
}

// HashAlgorithm_Blake2b512 BLAKE2b algorithm with a digest size of 512, as defined in [RFC 7693](https://datatracker.ietf.org/doc/rfc7693/) Section 4.
var HashAlgorithm_Blake2b512 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/blake2b512",
}

// HashAlgorithm_Blake3 [BLAKE3](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf)
var HashAlgorithm_Blake3 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/blake3",
}

// HashAlgorithm_CrystalsDilithium [Dilithium](https://pq-crystals.org/dilithium/)
var HashAlgorithm_CrystalsDilithium = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/crystalsDilithium",
}

// HashAlgorithm_CrystalsKyber [Kyber](https://pq-crystals.org/kyber/)
var HashAlgorithm_CrystalsKyber = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/crystalsKyber",
}

// HashAlgorithm_Falcon [FALCON](https://falcon-sign.info/falcon.pdf)
var HashAlgorithm_Falcon = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/falcon",
}

// HashAlgorithm_Md2 MD2 message-digest algorithm, as defined in [RFC 1319](https://datatracker.ietf.org/doc/rfc1319/).
var HashAlgorithm_Md2 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/md2",
}

// HashAlgorithm_Md4 MD4 message-digest algorithm, as defined in [RFC 1186](https://datatracker.ietf.org/doc/rfc1186/).
var HashAlgorithm_Md4 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/md4",
}

// HashAlgorithm_Md5 MD5 message-digest algorithm, as defined in [RFC 1321](https://datatracker.ietf.org/doc/rfc1321/).
var HashAlgorithm_Md5 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/md5",
}

// HashAlgorithm_Md6 [MD6 hash function](https://people.csail.mit.edu/rivest/pubs/RABCx08.pdf)
var HashAlgorithm_Md6 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/md6",
}

// HashAlgorithm_Other any hashing algorithm that does not exist in this list of entries
var HashAlgorithm_Other = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/other",
}

// HashAlgorithm_Sha1 SHA-1, a secure hashing algorithm, as defined in [RFC 3174](https://datatracker.ietf.org/doc/rfc3174/).
var HashAlgorithm_Sha1 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha1",
}

// HashAlgorithm_Sha224 SHA-2 with a digest length of 224, as defined in [RFC 3874](https://datatracker.ietf.org/doc/rfc3874/).
var HashAlgorithm_Sha224 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha224",
}

// HashAlgorithm_Sha256 SHA-2 with a digest length of 256, as defined in [RFC 6234](https://datatracker.ietf.org/doc/rfc6234/).
var HashAlgorithm_Sha256 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha256",
}

// HashAlgorithm_Sha384 SHA-2 with a digest length of 384, as defined in [RFC 6234](https://datatracker.ietf.org/doc/rfc6234/).
var HashAlgorithm_Sha384 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha384",
}

// HashAlgorithm_Sha3_224 SHA-3 with a digest length of 224, as defined in [FIPS 202](https://csrc.nist.gov/pubs/fips/202/final).
var HashAlgorithm_Sha3_224 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha3_224",
}

// HashAlgorithm_Sha3_256 SHA-3 with a digest length of 256, as defined in [FIPS 202](https://csrc.nist.gov/pubs/fips/202/final).
var HashAlgorithm_Sha3_256 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha3_256",
}

// HashAlgorithm_Sha3_384 SHA-3 with a digest length of 384, as defined in [FIPS 202](https://csrc.nist.gov/pubs/fips/202/final).
var HashAlgorithm_Sha3_384 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha3_384",
}

// HashAlgorithm_Sha3_512 SHA-3 with a digest length of 512, as defined in [FIPS 202](https://csrc.nist.gov/pubs/fips/202/final).
var HashAlgorithm_Sha3_512 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha3_512",
}

// HashAlgorithm_Sha512 SHA-2 with a digest length of 512, as defined in [RFC 6234](https://datatracker.ietf.org/doc/rfc6234/).
var HashAlgorithm_Sha512 = HashAlgorithm{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/sha512",
}

type AnyIndividualElement interface {
	asIndividualElement() *IndividualElement
}

// IndividualElement A concrete subclass of Element used by Individuals in the\nCore profile.
type IndividualElement struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/IndividualElement"`
	Element
}

func (o *IndividualElement) asIndividualElement() *IndividualElement {
	return o
}

// IndividualElement_NoAssertionElement An Individual Value for Element representing a set of Elements of unknown\nidentify or cardinality (number).
var IndividualElement_NoAssertionElement AnyIndividualElement = &ExternalIRI{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/NoAssertionElement",
}

// IndividualElement_NoneElement An Individual Value for Element representing a set of Elements with\ncardinality (number/count) of zero.
var IndividualElement_NoneElement AnyIndividualElement = &ExternalIRI{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/NoneElement",
}

type IndividualElementList []AnyIndividualElement

func (o *IndividualElementList) IndividualElements() ld.TypeSeq[AnyIndividualElement, *IndividualElement] {
	return ld.NewTypeSeq(*o, castIndividualElement)
}

type AnyIndividualLicensingInfo interface {
	asIndividualLicensingInfo() *IndividualLicensingInfo
}

// IndividualLicensingInfo A concrete subclass of AnyLicenseInfo used by Individuals in the\nExpandedLicensing profile.
type IndividualLicensingInfo struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/IndividualLicensingInfo"`
	LicenseInfo
}

func (o *IndividualLicensingInfo) asIndividualLicensingInfo() *IndividualLicensingInfo {
	return o
}

// IndividualLicensingInfo_NoAssertionLicense An Individual Value for License when no assertion can be made about its actual\nvalue.
var IndividualLicensingInfo_NoAssertionLicense AnyIndividualLicensingInfo = &ExternalIRI{
	id: "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/NoAssertionLicense",
}

// IndividualLicensingInfo_NoneLicense An Individual Value for License where the SPDX data creator determines that no\nlicense is present.
var IndividualLicensingInfo_NoneLicense AnyIndividualLicensingInfo = &ExternalIRI{
	id: "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/NoneLicense",
}

type IndividualLicensingInfoList []AnyIndividualLicensingInfo

func (o *IndividualLicensingInfoList) IndividualLicensingInfos() ld.TypeSeq[AnyIndividualLicensingInfo, *IndividualLicensingInfo] {
	return ld.NewTypeSeq(*o, castIndividualLicensingInfo)
}

type AnyIntegrityMethod interface {
	asIntegrityMethod() *IntegrityMethod
}

// IntegrityMethod Provides an independently reproducible mechanism that permits verification of a specific Element.
type IntegrityMethod struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/IntegrityMethod"`
	ID string  `iri:"@id"`
	// Comment Provide consumers with comments by the creator of the Element about the\nElement.
	Comment string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/comment" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *IntegrityMethod) asIntegrityMethod() *IntegrityMethod {
	return o
}

type IntegrityMethodList []AnyIntegrityMethod

func (o *IntegrityMethodList) ContentIdentifiers() ld.TypeSeq[AnyIntegrityMethod, *ContentIdentifier] {
	return ld.NewTypeSeq(*o, castContentIdentifier)
}

func (o *IntegrityMethodList) Hashes() ld.TypeSeq[AnyIntegrityMethod, *Hash] {
	return ld.NewTypeSeq(*o, castHash)
}

func (o *IntegrityMethodList) IntegrityMethods() ld.TypeSeq[AnyIntegrityMethod, *IntegrityMethod] {
	return ld.NewTypeSeq(*o, castIntegrityMethod)
}

func (o *IntegrityMethodList) PackageVerificationCodes() ld.TypeSeq[AnyIntegrityMethod, *PackageVerificationCode] {
	return ld.NewTypeSeq(*o, castPackageVerificationCode)
}

type AnyLicense interface {
	asLicense() *License
}

// License Abstract class for the portion of an AnyLicenseInfo representing a license.
type License struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/License"`
	ExtendableLicense
	// SeeAlsos Contains a URL where the License or LicenseAddition can be found in use.
	SeeAlsos []ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/seeAlso" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// IsDeprecatedLicenseId Specifies whether a license or additional text identifier has been marked as\ndeprecated.
	IsDeprecatedLicenseId bool `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isDeprecatedLicenseId" type:"http://www.w3.org/2001/XMLSchema#boolean"`
	// ObsoletedBy Specifies the licenseId that is preferred to be used in place of a deprecated\nLicense or LicenseAddition.
	ObsoletedBy string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/obsoletedBy" type:"http://www.w3.org/2001/XMLSchema#string"`
	// StandardLicenseHeader Provides a License author's preferred text to indicate that a file is covered\nby the License.
	StandardLicenseHeader string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardLicenseHeader" type:"http://www.w3.org/2001/XMLSchema#string"`
	// LicenseText Identifies the full text of a License or Addition.
	LicenseText string `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseText" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// IsOsiApproved Specifies whether the License is listed as approved by the\nOpen Source Initiative (OSI).
	IsOsiApproved bool `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isOsiApproved" type:"http://www.w3.org/2001/XMLSchema#boolean"`
	// LicenseXml Identifies all the text and metadata associated with a license in the license\nXML format.
	LicenseXml string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/licenseXml" type:"http://www.w3.org/2001/XMLSchema#string"`
	// IsFsfLibre Specifies whether the License is listed as free by the\nFree Software Foundation (FSF).
	IsFsfLibre bool `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isFsfLibre" type:"http://www.w3.org/2001/XMLSchema#boolean"`
	// StandardLicenseTemplate Identifies the full text of a License, in SPDX templating format.
	StandardLicenseTemplate string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardLicenseTemplate" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *License) asLicense() *License {
	return o
}

type LicenseList []AnyLicense

func (o *LicenseList) CustomLicenses() ld.TypeSeq[AnyLicense, *CustomLicense] {
	return ld.NewTypeSeq(*o, castCustomLicense)
}

func (o *LicenseList) Licenses() ld.TypeSeq[AnyLicense, *License] {
	return ld.NewTypeSeq(*o, castLicense)
}

func (o *LicenseList) ListedLicenses() ld.TypeSeq[AnyLicense, *ListedLicense] {
	return ld.NewTypeSeq(*o, castListedLicense)
}

type AnyLicenseAddition interface {
	asLicenseAddition() *LicenseAddition
}

// LicenseAddition Abstract class for additional text intended to be added to a License, but\nwhich is not itself a standalone License.
type LicenseAddition struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/LicenseAddition"`
	Element
	// AdditionText Identifies the full text of a LicenseAddition.
	AdditionText string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/additionText" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ObsoletedBy Specifies the licenseId that is preferred to be used in place of a deprecated\nLicense or LicenseAddition.
	ObsoletedBy string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/obsoletedBy" type:"http://www.w3.org/2001/XMLSchema#string"`
	// LicenseXml Identifies all the text and metadata associated with a license in the license\nXML format.
	LicenseXml string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/licenseXml" type:"http://www.w3.org/2001/XMLSchema#string"`
	// StandardAdditionTemplate Identifies the full text of a LicenseAddition, in SPDX templating format.
	StandardAdditionTemplate string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardAdditionTemplate" type:"http://www.w3.org/2001/XMLSchema#string"`
	// SeeAlsos Contains a URL where the License or LicenseAddition can be found in use.
	SeeAlsos []ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/seeAlso" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// IsDeprecatedAdditionId Specifies whether an additional text identifier has been marked as deprecated.
	IsDeprecatedAdditionId bool `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isDeprecatedAdditionId" type:"http://www.w3.org/2001/XMLSchema#boolean"`
}

func (o *LicenseAddition) asLicenseAddition() *LicenseAddition {
	return o
}

type LicenseAdditionList []AnyLicenseAddition

func (o *LicenseAdditionList) CustomLicenseAdditions() ld.TypeSeq[AnyLicenseAddition, *CustomLicenseAddition] {
	return ld.NewTypeSeq(*o, castCustomLicenseAddition)
}

func (o *LicenseAdditionList) LicenseAdditions() ld.TypeSeq[AnyLicenseAddition, *LicenseAddition] {
	return ld.NewTypeSeq(*o, castLicenseAddition)
}

func (o *LicenseAdditionList) ListedLicenseExceptions() ld.TypeSeq[AnyLicenseAddition, *ListedLicenseException] {
	return ld.NewTypeSeq(*o, castListedLicenseException)
}

type AnyLicenseExpression interface {
	asLicenseExpression() *LicenseExpression
}

// LicenseExpression An SPDX Element containing an SPDX license expression string.
type LicenseExpression struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/LicenseExpression"`
	LicenseInfo
	// LicenseExpression A string in the license expression format.
	LicenseExpression string `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseExpression" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// CustomIdToUris Maps a LicenseRef or AdditionRef string for a Custom License or a Custom\nLicense Addition to its URI ID.
	CustomIdToUris DictionaryEntryList `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/customIdToUri" type:"https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry"`
	// LicenseListVersion The version of the SPDX License List used in the license expression.
	LicenseListVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseListVersion" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *LicenseExpression) asLicenseExpression() *LicenseExpression {
	return o
}

type LicenseExpressionList []AnyLicenseExpression

func (o *LicenseExpressionList) LicenseExpressions() ld.TypeSeq[AnyLicenseExpression, *LicenseExpression] {
	return ld.NewTypeSeq(*o, castLicenseExpression)
}

type AnyLicenseInfo interface {
	asLicenseInfo() *LicenseInfo
}

// LicenseInfo Abstract class representing a license combination consisting of one or more licenses.
type LicenseInfo struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/AnyLicenseInfo"`
	Element
}

func (o *LicenseInfo) asLicenseInfo() *LicenseInfo {
	return o
}

type LicenseInfoList []AnyLicenseInfo

func (o *LicenseInfoList) ConjunctiveLicenseSets() ld.TypeSeq[AnyLicenseInfo, *ConjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castConjunctiveLicenseSet)
}

func (o *LicenseInfoList) CustomLicenses() ld.TypeSeq[AnyLicenseInfo, *CustomLicense] {
	return ld.NewTypeSeq(*o, castCustomLicense)
}

func (o *LicenseInfoList) DisjunctiveLicenseSets() ld.TypeSeq[AnyLicenseInfo, *DisjunctiveLicenseSet] {
	return ld.NewTypeSeq(*o, castDisjunctiveLicenseSet)
}

func (o *LicenseInfoList) ExtendableLicenses() ld.TypeSeq[AnyLicenseInfo, *ExtendableLicense] {
	return ld.NewTypeSeq(*o, castExtendableLicense)
}

func (o *LicenseInfoList) IndividualLicensingInfos() ld.TypeSeq[AnyLicenseInfo, *IndividualLicensingInfo] {
	return ld.NewTypeSeq(*o, castIndividualLicensingInfo)
}

func (o *LicenseInfoList) Licenses() ld.TypeSeq[AnyLicenseInfo, *License] {
	return ld.NewTypeSeq(*o, castLicense)
}

func (o *LicenseInfoList) LicenseExpressions() ld.TypeSeq[AnyLicenseInfo, *LicenseExpression] {
	return ld.NewTypeSeq(*o, castLicenseExpression)
}

func (o *LicenseInfoList) LicenseInfos() ld.TypeSeq[AnyLicenseInfo, *LicenseInfo] {
	return ld.NewTypeSeq(*o, castLicenseInfo)
}

func (o *LicenseInfoList) ListedLicenses() ld.TypeSeq[AnyLicenseInfo, *ListedLicense] {
	return ld.NewTypeSeq(*o, castListedLicense)
}

func (o *LicenseInfoList) OrLaterOperators() ld.TypeSeq[AnyLicenseInfo, *OrLaterOperator] {
	return ld.NewTypeSeq(*o, castOrLaterOperator)
}

func (o *LicenseInfoList) WithAdditionOperators() ld.TypeSeq[AnyLicenseInfo, *WithAdditionOperator] {
	return ld.NewTypeSeq(*o, castWithAdditionOperator)
}

// LifecycleScopeType Provide an enumerated set of lifecycle phases that can provide context to relationships.
type LifecycleScopeType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType"`
	id string  `iri:"@id"`
}

// LifecycleScopeType_Build A relationship has specific context implications during an element's build phase, during development.
var LifecycleScopeType_Build = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/build",
}

// LifecycleScopeType_Design A relationship has specific context implications during an element's design.
var LifecycleScopeType_Design = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/design",
}

// LifecycleScopeType_Development A relationship has specific context implications during development phase of an element.
var LifecycleScopeType_Development = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/development",
}

// LifecycleScopeType_Other A relationship has other specific context information necessary to capture that the above set of enumerations does not handle.
var LifecycleScopeType_Other = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/other",
}

// LifecycleScopeType_Runtime A relationship has specific context implications during the execution phase of an element.
var LifecycleScopeType_Runtime = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/runtime",
}

// LifecycleScopeType_Test A relationship has specific context implications during an element's testing phase, during development.
var LifecycleScopeType_Test = LifecycleScopeType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/test",
}

type AnyLifecycleScopedRelationship interface {
	asLifecycleScopedRelationship() *LifecycleScopedRelationship
}

// LifecycleScopedRelationship Provide context for a relationship that occurs in the lifecycle.
type LifecycleScopedRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopedRelationship"`
	Relationship
	// Scope Capture the scope of information about a specific relationship between elements.
	Scope LifecycleScopeType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/scope" type:"https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType"`
}

func (o *LifecycleScopedRelationship) asLifecycleScopedRelationship() *LifecycleScopedRelationship {
	return o
}

type LifecycleScopedRelationshipList []AnyLifecycleScopedRelationship

func (o *LifecycleScopedRelationshipList) LifecycleScopedRelationships() ld.TypeSeq[AnyLifecycleScopedRelationship, *LifecycleScopedRelationship] {
	return ld.NewTypeSeq(*o, castLifecycleScopedRelationship)
}

type AnyListedLicense interface {
	asListedLicense() *ListedLicense
}

// ListedLicense A license that is listed on the SPDX License List.
type ListedLicense struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ListedLicense"`
	License
	// ListVersionAdded Specifies the SPDX License List version in which this ListedLicense or\nListedLicenseException identifier was first added.
	ListVersionAdded string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/listVersionAdded" type:"http://www.w3.org/2001/XMLSchema#string"`
	// DeprecatedVersion Specifies the SPDX License List version in which this license or exception\nidentifier was deprecated.
	DeprecatedVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/deprecatedVersion" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *ListedLicense) asListedLicense() *ListedLicense {
	return o
}

type ListedLicenseList []AnyListedLicense

func (o *ListedLicenseList) ListedLicenses() ld.TypeSeq[AnyListedLicense, *ListedLicense] {
	return ld.NewTypeSeq(*o, castListedLicense)
}

type AnyListedLicenseException interface {
	asListedLicenseException() *ListedLicenseException
}

// ListedLicenseException A license exception that is listed on the SPDX Exceptions list.
type ListedLicenseException struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ListedLicenseException"`
	LicenseAddition
	// DeprecatedVersion Specifies the SPDX License List version in which this license or exception\nidentifier was deprecated.
	DeprecatedVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/deprecatedVersion" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ListVersionAdded Specifies the SPDX License List version in which this ListedLicense or\nListedLicenseException identifier was first added.
	ListVersionAdded string `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/listVersionAdded" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *ListedLicenseException) asListedLicenseException() *ListedLicenseException {
	return o
}

type ListedLicenseExceptionList []AnyListedLicenseException

func (o *ListedLicenseExceptionList) ListedLicenseExceptions() ld.TypeSeq[AnyListedLicenseException, *ListedLicenseException] {
	return ld.NewTypeSeq(*o, castListedLicenseException)
}

type AnyNamespaceMap interface {
	asNamespaceMap() *NamespaceMap
}

// NamespaceMap A mapping between prefixes and namespace partial URIs.
type NamespaceMap struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/NamespaceMap"`
	ID string  `iri:"@id"`
	// Namespace Provides an unambiguous mechanism for conveying a URI fragment portion of an\nElement ID.
	Namespace ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Core/namespace" required:"true" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// Prefix A substitute for a URI.
	Prefix string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/prefix" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *NamespaceMap) asNamespaceMap() *NamespaceMap {
	return o
}

type NamespaceMapList []AnyNamespaceMap

func (o *NamespaceMapList) NamespaceMaps() ld.TypeSeq[AnyNamespaceMap, *NamespaceMap] {
	return ld.NewTypeSeq(*o, castNamespaceMap)
}

type AnyOrLaterOperator interface {
	asOrLaterOperator() *OrLaterOperator
}

// OrLaterOperator Portion of an AnyLicenseInfo representing this version, or any later version,\nof the indicated License.
type OrLaterOperator struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/OrLaterOperator"`
	ExtendableLicense
	// SubjectLicense A License participating in an 'or later' model.
	SubjectLicense AnyLicense `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectLicense" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/License"`
}

func (o *OrLaterOperator) asOrLaterOperator() *OrLaterOperator {
	return o
}

type OrLaterOperatorList []AnyOrLaterOperator

func (o *OrLaterOperatorList) OrLaterOperators() ld.TypeSeq[AnyOrLaterOperator, *OrLaterOperator] {
	return ld.NewTypeSeq(*o, castOrLaterOperator)
}

type AnyOrganization interface {
	asOrganization() *Organization
}

// Organization A group of people who work together in an organized way for a shared purpose.
type Organization struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Organization"`
	Agent
}

func (o *Organization) asOrganization() *Organization {
	return o
}

// Organization_SpdxOrganization An Organization representing the SPDX Project.
var Organization_SpdxOrganization AnyOrganization = &ExternalIRI{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SpdxOrganization",
}

type OrganizationList []AnyOrganization

func (o *OrganizationList) Organizations() ld.TypeSeq[AnyOrganization, *Organization] {
	return ld.NewTypeSeq(*o, castOrganization)
}

type AnyPackage interface {
	asPackage() *Package
}

// Package Refers to any unit of content that can be associated with a distribution of\nsoftware.
type Package struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/Package"`
	SoftwareArtifact
	// SourceInfo Records any relevant background information or additional comments\nabout the origin of the package.
	SourceInfo string `iri:"https://spdx.org/rdf/3.0.1/terms/Software/sourceInfo" type:"http://www.w3.org/2001/XMLSchema#string"`
	// HomePage A place for the SPDX document creator to record a website that serves as the\npackage's home page.
	HomePage ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Software/homePage" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// PackageVersion Identify the version of a package.
	PackageVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/Software/packageVersion" type:"http://www.w3.org/2001/XMLSchema#string"`
	// PackageUrl Provides a place for the SPDX data creator to record the package URL string\n(in accordance with the Package URL specification) for a software Package.
	PackageUrl ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Software/packageUrl" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
	// DownloadLocation Identifies the download Uniform Resource Identifier for the package at the time\nthat the document was created.
	DownloadLocation ld.URI `iri:"https://spdx.org/rdf/3.0.1/terms/Software/downloadLocation" type:"http://www.w3.org/2001/XMLSchema#anyURI"`
}

func (o *Package) asPackage() *Package {
	return o
}

type PackageList []AnyPackage

func (o *PackageList) AIPackages() ld.TypeSeq[AnyPackage, *AIPackage] {
	return ld.NewTypeSeq(*o, castAIPackage)
}

func (o *PackageList) DatasetPackages() ld.TypeSeq[AnyPackage, *DatasetPackage] {
	return ld.NewTypeSeq(*o, castDatasetPackage)
}

func (o *PackageList) Packages() ld.TypeSeq[AnyPackage, *Package] {
	return ld.NewTypeSeq(*o, castPackage)
}

type AnyPackageVerificationCode interface {
	asPackageVerificationCode() *PackageVerificationCode
}

// PackageVerificationCode An SPDX version 2.X compatible verification method for software packages.
type PackageVerificationCode struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/PackageVerificationCode"`
	IntegrityMethod
	// Algorithm Specifies the algorithm used for calculating the hash value.
	Algorithm HashAlgorithm `iri:"https://spdx.org/rdf/3.0.1/terms/Core/algorithm" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm"`
	// HashValue The result of applying a hash algorithm to an Element.
	HashValue string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/hashValue" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// PackageVerificationCodeExcludedFiles The relative file name of a file to be excluded from the\n`PackageVerificationCode`.
	PackageVerificationCodeExcludedFiles []string `iri:"https://spdx.org/rdf/3.0.1/terms/Core/packageVerificationCodeExcludedFile" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *PackageVerificationCode) asPackageVerificationCode() *PackageVerificationCode {
	return o
}

type PackageVerificationCodeList []AnyPackageVerificationCode

func (o *PackageVerificationCodeList) PackageVerificationCodes() ld.TypeSeq[AnyPackageVerificationCode, *PackageVerificationCode] {
	return ld.NewTypeSeq(*o, castPackageVerificationCode)
}

type AnyPerson interface {
	asPerson() *Person
}

// Person An individual human being.
type Person struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Person"`
	Agent
}

func (o *Person) asPerson() *Person {
	return o
}

type PersonList []AnyPerson

func (o *PersonList) People() ld.TypeSeq[AnyPerson, *Person] {
	return ld.NewTypeSeq(*o, castPerson)
}

type AnyPositiveIntegerRange interface {
	asPositiveIntegerRange() *PositiveIntegerRange
}

// PositiveIntegerRange A tuple of two positive integers that define a range.
type PositiveIntegerRange struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange"`
	ID string  `iri:"@id"`
	// EndIntegerRange Defines the end of a range.
	EndIntegerRange ld.PositiveInt `iri:"https://spdx.org/rdf/3.0.1/terms/Core/endIntegerRange" required:"true" type:"http://www.w3.org/2001/XMLSchema#positiveInteger"`
	// BeginIntegerRange Defines the beginning of a range.
	BeginIntegerRange ld.PositiveInt `iri:"https://spdx.org/rdf/3.0.1/terms/Core/beginIntegerRange" required:"true" type:"http://www.w3.org/2001/XMLSchema#positiveInteger"`
}

func (o *PositiveIntegerRange) asPositiveIntegerRange() *PositiveIntegerRange {
	return o
}

type PositiveIntegerRangeList []AnyPositiveIntegerRange

func (o *PositiveIntegerRangeList) PositiveIntegerRanges() ld.TypeSeq[AnyPositiveIntegerRange, *PositiveIntegerRange] {
	return ld.NewTypeSeq(*o, castPositiveIntegerRange)
}

// PresenceType Categories of presence or absence.
type PresenceType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/PresenceType"`
	id string  `iri:"@id"`
}

// PresenceType_No Indicates absence of the field.
var PresenceType_No = PresenceType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/no",
}

// PresenceType_NoAssertion Makes no assertion about the field.
var PresenceType_NoAssertion = PresenceType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/noAssertion",
}

// PresenceType_Yes Indicates presence of the field.
var PresenceType_Yes = PresenceType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/yes",
}

// ProfileIdentifierType Enumeration of the valid profiles.
type ProfileIdentifierType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType"`
	id string  `iri:"@id"`
}

// ProfileIdentifierType_Ai the element follows the AI profile specification
var ProfileIdentifierType_Ai = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/ai",
}

// ProfileIdentifierType_Build the element follows the Build profile specification
var ProfileIdentifierType_Build = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/build",
}

// ProfileIdentifierType_Core the element follows the Core profile specification
var ProfileIdentifierType_Core = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/core",
}

// ProfileIdentifierType_Dataset the element follows the Dataset profile specification
var ProfileIdentifierType_Dataset = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/dataset",
}

// ProfileIdentifierType_ExpandedLicensing the element follows the ExpandedLicensing profile specification
var ProfileIdentifierType_ExpandedLicensing = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/expandedLicensing",
}

// ProfileIdentifierType_Extension the element follows the Extension profile specification
var ProfileIdentifierType_Extension = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/extension",
}

// ProfileIdentifierType_Lite the element follows the Lite profile specification
var ProfileIdentifierType_Lite = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/lite",
}

// ProfileIdentifierType_Security the element follows the Security profile specification
var ProfileIdentifierType_Security = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/security",
}

// ProfileIdentifierType_SimpleLicensing the element follows the SimpleLicensing profile specification
var ProfileIdentifierType_SimpleLicensing = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/simpleLicensing",
}

// ProfileIdentifierType_Software the element follows the Software profile specification
var ProfileIdentifierType_Software = ProfileIdentifierType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/software",
}

type AnyRelationship interface {
	asRelationship() *Relationship
}

// Relationship Describes a relationship between one or more elements.
type Relationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Relationship"`
	Element
	// Completeness Provides information about the completeness of relationships.
	Completeness RelationshipCompleteness `iri:"https://spdx.org/rdf/3.0.1/terms/Core/completeness" type:"https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness"`
	// EndTime Specifies the time from which an element is no longer applicable / valid.
	EndTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/endTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// To References an Element on the right-hand side of a relationship.
	To ElementList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/to" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	// From References the Element on the left-hand side of a relationship.
	From AnyElement `iri:"https://spdx.org/rdf/3.0.1/terms/Core/from" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/Element"`
	// RelationshipType Information about the relationship between two Elements.
	RelationshipType RelationshipType `iri:"https://spdx.org/rdf/3.0.1/terms/Core/relationshipType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType"`
	// StartTime Specifies the time from which an element is applicable / valid.
	StartTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Core/startTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
}

func (o *Relationship) asRelationship() *Relationship {
	return o
}

type RelationshipList []AnyRelationship

func (o *RelationshipList) CvssV2VulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *CvssV2VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV2VulnAssessmentRelationship)
}

func (o *RelationshipList) CvssV3VulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *CvssV3VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV3VulnAssessmentRelationship)
}

func (o *RelationshipList) CvssV4VulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *CvssV4VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV4VulnAssessmentRelationship)
}

func (o *RelationshipList) EpssVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *EpssVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castEpssVulnAssessmentRelationship)
}

func (o *RelationshipList) ExploitCatalogVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *ExploitCatalogVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castExploitCatalogVulnAssessmentRelationship)
}

func (o *RelationshipList) LifecycleScopedRelationships() ld.TypeSeq[AnyRelationship, *LifecycleScopedRelationship] {
	return ld.NewTypeSeq(*o, castLifecycleScopedRelationship)
}

func (o *RelationshipList) Relationships() ld.TypeSeq[AnyRelationship, *Relationship] {
	return ld.NewTypeSeq(*o, castRelationship)
}

func (o *RelationshipList) SsvcVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *SsvcVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castSsvcVulnAssessmentRelationship)
}

func (o *RelationshipList) VexAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VexAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexAffectedVulnAssessmentRelationship)
}

func (o *RelationshipList) VexFixedVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VexFixedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexFixedVulnAssessmentRelationship)
}

func (o *RelationshipList) VexNotAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VexNotAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexNotAffectedVulnAssessmentRelationship)
}

func (o *RelationshipList) VexUnderInvestigationVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VexUnderInvestigationVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexUnderInvestigationVulnAssessmentRelationship)
}

func (o *RelationshipList) VexVulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VexVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexVulnAssessmentRelationship)
}

func (o *RelationshipList) VulnAssessmentRelationships() ld.TypeSeq[AnyRelationship, *VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVulnAssessmentRelationship)
}

// RelationshipCompleteness Indicates whether a relationship is known to be complete, incomplete, or if no assertion is made with respect to relationship completeness.
type RelationshipCompleteness struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness"`
	id string  `iri:"@id"`
}

// RelationshipCompleteness_Complete The relationship is known to be exhaustive.
var RelationshipCompleteness_Complete = RelationshipCompleteness{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness/complete",
}

// RelationshipCompleteness_Incomplete The relationship is known not to be exhaustive.
var RelationshipCompleteness_Incomplete = RelationshipCompleteness{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness/incomplete",
}

// RelationshipCompleteness_NoAssertion No assertion can be made about the completeness of the relationship.
var RelationshipCompleteness_NoAssertion = RelationshipCompleteness{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness/noAssertion",
}

// RelationshipType Information about the relationship between two Elements.
type RelationshipType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType"`
	id string  `iri:"@id"`
}

// RelationshipType_Affects The `from` Vulnerability affects each `to` Element. The use of the `affects` type is constrained to `VexAffectedVulnAssessmentRelationship` classed relationships.
var RelationshipType_Affects = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/affects",
}

// RelationshipType_AmendedBy The `from` Element is amended by each `to` Element.
var RelationshipType_AmendedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/amendedBy",
}

// RelationshipType_AncestorOf The `from` Element is an ancestor of each `to` Element.
var RelationshipType_AncestorOf = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/ancestorOf",
}

// RelationshipType_AvailableFrom The `from` Element is available from the additional supplier described by each `to` Element.
var RelationshipType_AvailableFrom = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/availableFrom",
}

// RelationshipType_Configures The `from` Element is a configuration applied to each `to` Element, during a LifecycleScopeType period.
var RelationshipType_Configures = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/configures",
}

// RelationshipType_Contains The `from` Element contains each `to` Element.
var RelationshipType_Contains = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/contains",
}

// RelationshipType_CoordinatedBy The `from` Vulnerability is coordinatedBy the `to` Agent(s) (vendor, researcher, or consumer agent).
var RelationshipType_CoordinatedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/coordinatedBy",
}

// RelationshipType_CopiedTo The `from` Element has been copied to each `to` Element.
var RelationshipType_CopiedTo = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/copiedTo",
}

// RelationshipType_DelegatedTo The `from` Agent is delegating an action to the Agent of the `to` Relationship (which must be of type invokedBy), during a LifecycleScopeType (e.g. the `to` invokedBy Relationship is being done on behalf of `from`).
var RelationshipType_DelegatedTo = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/delegatedTo",
}

// RelationshipType_DependsOn The `from` Element depends on each `to` Element, during a LifecycleScopeType period.
var RelationshipType_DependsOn = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/dependsOn",
}

// RelationshipType_DescendantOf The `from` Element is a descendant of each `to` Element.
var RelationshipType_DescendantOf = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/descendantOf",
}

// RelationshipType_Describes The `from` Element describes each `to` Element. To denote the root(s) of a tree of elements in a collection, the rootElement property should be used.
var RelationshipType_Describes = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/describes",
}

// RelationshipType_DoesNotAffect The `from` Vulnerability has no impact on each `to` Element. The use of the `doesNotAffect` is constrained to `VexNotAffectedVulnAssessmentRelationship` classed relationships.
var RelationshipType_DoesNotAffect = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/doesNotAffect",
}

// RelationshipType_ExpandsTo The `from` archive expands out as an artifact described by each `to` Element.
var RelationshipType_ExpandsTo = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/expandsTo",
}

// RelationshipType_ExploitCreatedBy The `from` Vulnerability has had an exploit created against it by each `to` Agent.
var RelationshipType_ExploitCreatedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/exploitCreatedBy",
}

// RelationshipType_FixedBy Designates a `from` Vulnerability has been fixed by the `to` Agent(s).
var RelationshipType_FixedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/fixedBy",
}

// RelationshipType_FixedIn A `from` Vulnerability has been fixed in each `to` Element. The use of the `fixedIn` type is constrained to `VexFixedVulnAssessmentRelationship` classed relationships.
var RelationshipType_FixedIn = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/fixedIn",
}

// RelationshipType_FoundBy Designates a `from` Vulnerability was originally discovered by the `to` Agent(s).
var RelationshipType_FoundBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/foundBy",
}

// RelationshipType_Generates The `from` Element generates each `to` Element.
var RelationshipType_Generates = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/generates",
}

// RelationshipType_HasAddedFile Every `to` Element is a file added to the `from` Element (`from` hasAddedFile `to`).
var RelationshipType_HasAddedFile = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasAddedFile",
}

// RelationshipType_HasAssessmentFor Relates a `from` Vulnerability and each `to` Element with a security assessment. To be used with `VulnAssessmentRelationship` types.
var RelationshipType_HasAssessmentFor = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasAssessmentFor",
}

// RelationshipType_HasAssociatedVulnerability Used to associate a `from` Artifact with each `to` Vulnerability.
var RelationshipType_HasAssociatedVulnerability = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasAssociatedVulnerability",
}

// RelationshipType_HasConcludedLicense The `from` SoftwareArtifact is concluded by the SPDX data creator to be governed by each `to` license.
var RelationshipType_HasConcludedLicense = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasConcludedLicense",
}

// RelationshipType_HasDataFile The `from` Element treats each `to` Element as a data file. A data file is an artifact that stores data required or optional for the `from` Element's functionality. A data file can be a database file, an index file, a log file, an AI model file, a calibration data file, a temporary file, a backup file, and more. For AI training dataset, test dataset, test artifact, configuration data, build input data, and build output data, please consider using the more specific relationship types: `trainedOn`, `testedOn`, `hasTest`, `configures`, `hasInput`, and `hasOutput`, respectively. This relationship does not imply dependency.
var RelationshipType_HasDataFile = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDataFile",
}

// RelationshipType_HasDeclaredLicense The `from` SoftwareArtifact was discovered to actually contain each `to` license, for example as detected by use of automated tooling.
var RelationshipType_HasDeclaredLicense = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDeclaredLicense",
}

// RelationshipType_HasDeletedFile Every `to` Element is a file deleted from the `from` Element (`from` hasDeletedFile `to`).
var RelationshipType_HasDeletedFile = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDeletedFile",
}

// RelationshipType_HasDependencyManifest The `from` Element has manifest files that contain dependency information in each `to` Element.
var RelationshipType_HasDependencyManifest = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDependencyManifest",
}

// RelationshipType_HasDistributionArtifact The `from` Element is distributed as an artifact in each `to` Element (e.g. an RPM or archive file).
var RelationshipType_HasDistributionArtifact = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDistributionArtifact",
}

// RelationshipType_HasDocumentation The `from` Element is documented by each `to` Element.
var RelationshipType_HasDocumentation = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDocumentation",
}

// RelationshipType_HasDynamicLink The `from` Element dynamically links in each `to` Element, during a LifecycleScopeType period.
var RelationshipType_HasDynamicLink = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasDynamicLink",
}

// RelationshipType_HasEvidence Every `to` Element is considered as evidence for the `from` Element (`from` hasEvidence `to`).
var RelationshipType_HasEvidence = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasEvidence",
}

// RelationshipType_HasExample Every `to` Element is an example for the `from` Element (`from` hasExample `to`).
var RelationshipType_HasExample = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasExample",
}

// RelationshipType_HasHost The `from` Build was run on the `to` Element during a LifecycleScopeType period (e.g. the host that the build runs on).
var RelationshipType_HasHost = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasHost",
}

// RelationshipType_HasInput The `from` Build has each `to` Element as an input, during a LifecycleScopeType period.
var RelationshipType_HasInput = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasInput",
}

// RelationshipType_HasMetadata Every `to` Element is metadata about the `from` Element (`from` hasMetadata `to`).
var RelationshipType_HasMetadata = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasMetadata",
}

// RelationshipType_HasOptionalComponent Every `to` Element is an optional component of the `from` Element (`from` hasOptionalComponent `to`).
var RelationshipType_HasOptionalComponent = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasOptionalComponent",
}

// RelationshipType_HasOptionalDependency The `from` Element optionally depends on each `to` Element, during a LifecycleScopeType period.
var RelationshipType_HasOptionalDependency = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasOptionalDependency",
}

// RelationshipType_HasOutput The `from` Build element generates each `to` Element as an output, during a LifecycleScopeType period.
var RelationshipType_HasOutput = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasOutput",
}

// RelationshipType_HasPrerequisite The `from` Element has a prerequisite on each `to` Element, during a LifecycleScopeType period.
var RelationshipType_HasPrerequisite = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasPrerequisite",
}

// RelationshipType_HasProvidedDependency The `from` Element has a dependency on each `to` Element, dependency is not in the distributed artifact, but assumed to be provided, during a LifecycleScopeType period.
var RelationshipType_HasProvidedDependency = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasProvidedDependency",
}

// RelationshipType_HasRequirement The `from` Element has a requirement on each `to` Element, during a LifecycleScopeType period.
var RelationshipType_HasRequirement = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasRequirement",
}

// RelationshipType_HasSpecification Every `to` Element is a specification for the `from` Element (`from` hasSpecification `to`), during a LifecycleScopeType period.
var RelationshipType_HasSpecification = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasSpecification",
}

// RelationshipType_HasStaticLink The `from` Element statically links in each `to` Element, during a LifecycleScopeType period.
var RelationshipType_HasStaticLink = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasStaticLink",
}

// RelationshipType_HasTest Every `to` Element is a test artifact for the `from` Element (`from` hasTest `to`), during a LifecycleScopeType period.
var RelationshipType_HasTest = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasTest",
}

// RelationshipType_HasTestCase Every `to` Element is a test case for the `from` Element (`from` hasTestCase `to`).
var RelationshipType_HasTestCase = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasTestCase",
}

// RelationshipType_HasVariant Every `to` Element is a variant the `from` Element (`from` hasVariant `to`).
var RelationshipType_HasVariant = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/hasVariant",
}

// RelationshipType_InvokedBy The `from` Element was invoked by the `to` Agent, during a LifecycleScopeType period (for example, a Build element that describes a build step).
var RelationshipType_InvokedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/invokedBy",
}

// RelationshipType_ModifiedBy The `from` Element is modified by each `to` Element.
var RelationshipType_ModifiedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/modifiedBy",
}

// RelationshipType_Other Every `to` Element is related to the `from` Element where the relationship type is not described by any of the SPDX relationship types (this relationship is directionless).
var RelationshipType_Other = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/other",
}

// RelationshipType_PackagedBy Every `to` Element is a packaged instance of the `from` Element (`from` packagedBy `to`).
var RelationshipType_PackagedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/packagedBy",
}

// RelationshipType_PatchedBy Every `to` Element is a patch for the `from` Element (`from` patchedBy `to`).
var RelationshipType_PatchedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/patchedBy",
}

// RelationshipType_PublishedBy Designates a `from` Vulnerability was made available for public use or reference by each `to` Agent.
var RelationshipType_PublishedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/publishedBy",
}

// RelationshipType_ReportedBy Designates a `from` Vulnerability was first reported to a project, vendor, or tracking database for formal identification by each `to` Agent.
var RelationshipType_ReportedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/reportedBy",
}

// RelationshipType_RepublishedBy Designates a `from` Vulnerability's details were tracked, aggregated, and/or enriched to improve context (i.e. NVD) by each `to` Agent.
var RelationshipType_RepublishedBy = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/republishedBy",
}

// RelationshipType_SerializedInArtifact The `from` SpdxDocument can be found in a serialized form in each `to` Artifact.
var RelationshipType_SerializedInArtifact = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/serializedInArtifact",
}

// RelationshipType_TestedOn The `from` Element has been tested on the `to` Element(s).
var RelationshipType_TestedOn = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/testedOn",
}

// RelationshipType_TrainedOn The `from` Element has been trained on the `to` Element(s).
var RelationshipType_TrainedOn = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/trainedOn",
}

// RelationshipType_UnderInvestigationFor The `from` Vulnerability impact is being investigated for each `to` Element. The use of the `underInvestigationFor` type is constrained to `VexUnderInvestigationVulnAssessmentRelationship` classed relationships.
var RelationshipType_UnderInvestigationFor = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/underInvestigationFor",
}

// RelationshipType_UsesTool The `from` Element uses each `to` Element as a tool, during a LifecycleScopeType period.
var RelationshipType_UsesTool = RelationshipType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/usesTool",
}

// SafetyRiskAssessmentType Specifies the safety risk level.
type SafetyRiskAssessmentType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType"`
	id string  `iri:"@id"`
}

// SafetyRiskAssessmentType_High The second-highest level of risk posed by an AI system.
var SafetyRiskAssessmentType_High = SafetyRiskAssessmentType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType/high",
}

// SafetyRiskAssessmentType_Low Low/no risk is posed by an AI system.
var SafetyRiskAssessmentType_Low = SafetyRiskAssessmentType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType/low",
}

// SafetyRiskAssessmentType_Medium The third-highest level of risk posed by an AI system.
var SafetyRiskAssessmentType_Medium = SafetyRiskAssessmentType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType/medium",
}

// SafetyRiskAssessmentType_Serious The highest level of risk posed by an AI system.
var SafetyRiskAssessmentType_Serious = SafetyRiskAssessmentType{
	id: "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType/serious",
}

type AnySbom interface {
	asSbom() *Sbom
}

// Sbom A collection of SPDX Elements describing a single package.
type Sbom struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/Sbom"`
	Bom
	// SbomTypes Provides information about the type of an SBOM.
	SbomTypes []SbomType `iri:"https://spdx.org/rdf/3.0.1/terms/Software/sbomType" type:"https://spdx.org/rdf/3.0.1/terms/Software/SbomType"`
}

func (o *Sbom) asSbom() *Sbom {
	return o
}

type SbomList []AnySbom

func (o *SbomList) Sboms() ld.TypeSeq[AnySbom, *Sbom] {
	return ld.NewTypeSeq(*o, castSbom)
}

// SbomType Provides a set of values to be used to describe the common types of SBOMs that\ntools may create.
type SbomType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/SbomType"`
	id string  `iri:"@id"`
}

// SbomType_Analyzed SBOM generated through analysis of artifacts (e.g., executables, packages, containers, and virtual machine images) after its build. Such analysis generally requires a variety of heuristics. In some contexts, this may also be referred to as a \"3rd party\" SBOM.
var SbomType_Analyzed = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/analyzed",
}

// SbomType_Build SBOM generated as part of the process of building the software to create a releasable artifact (e.g., executable or package) from data such as source files, dependencies, built components, build process ephemeral data, and other SBOMs.
var SbomType_Build = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/build",
}

// SbomType_Deployed SBOM provides an inventory of software that is present on a system. This may be an assembly of other SBOMs that combines analysis of configuration options, and examination of execution behavior in a (potentially simulated) deployment environment.
var SbomType_Deployed = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/deployed",
}

// SbomType_Design SBOM of intended, planned software project or product with included components (some of which may not yet exist) for a new software artifact.
var SbomType_Design = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/design",
}

// SbomType_Runtime SBOM generated through instrumenting the system running the software, to capture only components present in the system, as well as external call-outs or dynamically loaded components. In some contexts, this may also be referred to as an \"Instrumented\" or \"Dynamic\" SBOM.
var SbomType_Runtime = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/runtime",
}

// SbomType_Source SBOM created directly from the development environment, source files, and included dependencies used to build an product artifact.
var SbomType_Source = SbomType{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/source",
}

type AnySimpleLicensingText interface {
	asSimpleLicensingText() *SimpleLicensingText
}

// SimpleLicensingText A license or addition that is not listed on the SPDX License List.
type SimpleLicensingText struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/SimpleLicensingText"`
	Element
	// LicenseText Identifies the full text of a License or Addition.
	LicenseText string `iri:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseText" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *SimpleLicensingText) asSimpleLicensingText() *SimpleLicensingText {
	return o
}

type SimpleLicensingTextList []AnySimpleLicensingText

func (o *SimpleLicensingTextList) SimpleLicensingTexts() ld.TypeSeq[AnySimpleLicensingText, *SimpleLicensingText] {
	return ld.NewTypeSeq(*o, castSimpleLicensingText)
}

type AnySnippet interface {
	asSnippet() *Snippet
}

// Snippet Describes a certain part of a file.
type Snippet struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/Snippet"`
	SoftwareArtifact
	// SnippetFromFile Defines the original host file that the snippet information applies to.
	SnippetFromFile AnyFile `iri:"https://spdx.org/rdf/3.0.1/terms/Software/snippetFromFile" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Software/File"`
	// LineRange Defines the line range in the original host file that the snippet information\napplies to.
	LineRange AnyPositiveIntegerRange `iri:"https://spdx.org/rdf/3.0.1/terms/Software/lineRange" type:"https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange"`
	// ByteRange Defines the byte range in the original host file that the snippet information\napplies to.
	ByteRange AnyPositiveIntegerRange `iri:"https://spdx.org/rdf/3.0.1/terms/Software/byteRange" type:"https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange"`
}

func (o *Snippet) asSnippet() *Snippet {
	return o
}

type SnippetList []AnySnippet

func (o *SnippetList) Snippets() ld.TypeSeq[AnySnippet, *Snippet] {
	return ld.NewTypeSeq(*o, castSnippet)
}

type AnySoftwareAgent interface {
	asSoftwareAgent() *SoftwareAgent
}

// SoftwareAgent A software agent.
type SoftwareAgent struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/SoftwareAgent"`
	Agent
}

func (o *SoftwareAgent) asSoftwareAgent() *SoftwareAgent {
	return o
}

type SoftwareAgentList []AnySoftwareAgent

func (o *SoftwareAgentList) SoftwareAgents() ld.TypeSeq[AnySoftwareAgent, *SoftwareAgent] {
	return ld.NewTypeSeq(*o, castSoftwareAgent)
}

type AnySoftwareArtifact interface {
	asSoftwareArtifact() *SoftwareArtifact
}

// SoftwareArtifact A distinct article or unit related to Software.
type SoftwareArtifact struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/SoftwareArtifact"`
	Artifact
	// ContentIdentifiers A canonical, unique, immutable identifier of the artifact content, that may be\nused for verifying its identity and/or integrity.
	ContentIdentifiers ContentIdentifierList `iri:"https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifier" type:"https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifier"`
	// AttributionTexts Provides a place for the SPDX data creator to record acknowledgement text for\na software Package, File or Snippet.
	AttributionTexts []string `iri:"https://spdx.org/rdf/3.0.1/terms/Software/attributionText" type:"http://www.w3.org/2001/XMLSchema#string"`
	// AdditionalPurposes Provides additional purpose information of the software artifact.
	AdditionalPurposes []SoftwarePurpose `iri:"https://spdx.org/rdf/3.0.1/terms/Software/additionalPurpose" type:"https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose"`
	// PrimaryPurpose Provides information about the primary purpose of the software artifact.
	PrimaryPurpose SoftwarePurpose `iri:"https://spdx.org/rdf/3.0.1/terms/Software/primaryPurpose" type:"https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose"`
	// CopyrightText Identifies the text of one or more copyright notices for a software Package,\nFile or Snippet, if any.
	CopyrightText string `iri:"https://spdx.org/rdf/3.0.1/terms/Software/copyrightText" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *SoftwareArtifact) asSoftwareArtifact() *SoftwareArtifact {
	return o
}

type SoftwareArtifactList []AnySoftwareArtifact

func (o *SoftwareArtifactList) AIPackages() ld.TypeSeq[AnySoftwareArtifact, *AIPackage] {
	return ld.NewTypeSeq(*o, castAIPackage)
}

func (o *SoftwareArtifactList) DatasetPackages() ld.TypeSeq[AnySoftwareArtifact, *DatasetPackage] {
	return ld.NewTypeSeq(*o, castDatasetPackage)
}

func (o *SoftwareArtifactList) Files() ld.TypeSeq[AnySoftwareArtifact, *File] {
	return ld.NewTypeSeq(*o, castFile)
}

func (o *SoftwareArtifactList) Packages() ld.TypeSeq[AnySoftwareArtifact, *Package] {
	return ld.NewTypeSeq(*o, castPackage)
}

func (o *SoftwareArtifactList) Snippets() ld.TypeSeq[AnySoftwareArtifact, *Snippet] {
	return ld.NewTypeSeq(*o, castSnippet)
}

func (o *SoftwareArtifactList) SoftwareArtifacts() ld.TypeSeq[AnySoftwareArtifact, *SoftwareArtifact] {
	return ld.NewTypeSeq(*o, castSoftwareArtifact)
}

// SoftwarePurpose Provides information about the primary purpose of an Element.
type SoftwarePurpose struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose"`
	id string  `iri:"@id"`
}

// SoftwarePurpose_Application The Element is a software application.
var SoftwarePurpose_Application = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/application",
}

// SoftwarePurpose_Archive The Element is an archived collection of one or more files (.tar, .zip, etc.).
var SoftwarePurpose_Archive = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/archive",
}

// SoftwarePurpose_Bom The Element is a bill of materials.
var SoftwarePurpose_Bom = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/bom",
}

// SoftwarePurpose_Configuration The Element is configuration data.
var SoftwarePurpose_Configuration = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/configuration",
}

// SoftwarePurpose_Container The Element is a container image which can be used by a container runtime application.
var SoftwarePurpose_Container = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/container",
}

// SoftwarePurpose_Data The Element is data.
var SoftwarePurpose_Data = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/data",
}

// SoftwarePurpose_Device The Element refers to a chipset, processor, or electronic board.
var SoftwarePurpose_Device = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/device",
}

// SoftwarePurpose_DeviceDriver The Element represents software that controls hardware devices.
var SoftwarePurpose_DeviceDriver = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/deviceDriver",
}

// SoftwarePurpose_DiskImage The Element refers to a disk image that can be written to a disk, booted in a VM, etc. A disk image typically contains most or all of the components necessary to boot, such as bootloaders, kernels, firmware, userspace, etc.
var SoftwarePurpose_DiskImage = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/diskImage",
}

// SoftwarePurpose_Documentation The Element is documentation.
var SoftwarePurpose_Documentation = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/documentation",
}

// SoftwarePurpose_Evidence The Element is the evidence that a specification or requirement has been fulfilled.
var SoftwarePurpose_Evidence = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/evidence",
}

// SoftwarePurpose_Executable The Element is an Artifact that can be run on a computer.
var SoftwarePurpose_Executable = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/executable",
}

// SoftwarePurpose_File The Element is a single file which can be independently distributed (configuration file, statically linked binary, Kubernetes deployment, etc.).
var SoftwarePurpose_File = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/file",
}

// SoftwarePurpose_FilesystemImage The Element is a file system image that can be written to a disk (or virtual) partition.
var SoftwarePurpose_FilesystemImage = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/filesystemImage",
}

// SoftwarePurpose_Firmware The Element provides low level control over a device's hardware.
var SoftwarePurpose_Firmware = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/firmware",
}

// SoftwarePurpose_Framework The Element is a software framework.
var SoftwarePurpose_Framework = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/framework",
}

// SoftwarePurpose_Install The Element is used to install software on disk.
var SoftwarePurpose_Install = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/install",
}

// SoftwarePurpose_Library The Element is a software library.
var SoftwarePurpose_Library = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/library",
}

// SoftwarePurpose_Manifest The Element is a software manifest.
var SoftwarePurpose_Manifest = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/manifest",
}

// SoftwarePurpose_Model The Element is a machine learning or artificial intelligence model.
var SoftwarePurpose_Model = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/model",
}

// SoftwarePurpose_Module The Element is a module of a piece of software.
var SoftwarePurpose_Module = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/module",
}

// SoftwarePurpose_OperatingSystem The Element is an operating system.
var SoftwarePurpose_OperatingSystem = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/operatingSystem",
}

// SoftwarePurpose_Other The Element doesn't fit into any of the other categories.
var SoftwarePurpose_Other = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/other",
}

// SoftwarePurpose_Patch The Element contains a set of changes to update, fix, or improve another Element.
var SoftwarePurpose_Patch = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/patch",
}

// SoftwarePurpose_Platform The Element represents a runtime environment.
var SoftwarePurpose_Platform = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/platform",
}

// SoftwarePurpose_Requirement The Element provides a requirement needed as input for another Element.
var SoftwarePurpose_Requirement = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/requirement",
}

// SoftwarePurpose_Source The Element is a single or a collection of source files.
var SoftwarePurpose_Source = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/source",
}

// SoftwarePurpose_Specification The Element is a plan, guideline or strategy how to create, perform or analyze an application.
var SoftwarePurpose_Specification = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/specification",
}

// SoftwarePurpose_Test The Element is a test used to verify functionality on an software element.
var SoftwarePurpose_Test = SoftwarePurpose{
	id: "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/test",
}

type AnySpdxDocument interface {
	asSpdxDocument() *SpdxDocument
}

// SpdxDocument A collection of SPDX Elements that could potentially be serialized.
type SpdxDocument struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/SpdxDocument"`
	ElementCollection
	// DataLicense Provides the license under which the SPDX documentation of the Element can be\nused.
	DataLicense AnyLicenseInfo `iri:"https://spdx.org/rdf/3.0.1/terms/Core/dataLicense" type:"https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/AnyLicenseInfo"`
	// NamespaceMaps Provides a NamespaceMap of prefixes and associated namespace partial URIs applicable to an SpdxDocument and independent of any specific serialization format or instance.
	NamespaceMaps NamespaceMapList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/namespaceMap" type:"https://spdx.org/rdf/3.0.1/terms/Core/NamespaceMap"`
	// Imports Provides an ExternalMap of Element identifiers.
	Imports ExternalMapList `iri:"https://spdx.org/rdf/3.0.1/terms/Core/import" type:"https://spdx.org/rdf/3.0.1/terms/Core/ExternalMap"`
}

func (o *SpdxDocument) asSpdxDocument() *SpdxDocument {
	return o
}

type SpdxDocumentList []AnySpdxDocument

func (o *SpdxDocumentList) SpdxDocuments() ld.TypeSeq[AnySpdxDocument, *SpdxDocument] {
	return ld.NewTypeSeq(*o, castSpdxDocument)
}

// SsvcDecisionType Specifies the SSVC decision type.
type SsvcDecisionType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType"`
	id string  `iri:"@id"`
}

// SsvcDecisionType_Act The vulnerability requires attention from the organization's internal, supervisory-level and leadership-level individuals. Necessary actions include requesting assistance or information about the vulnerability, as well as publishing a notification either internally and/or externally. Typically, internal groups would meet to determine the overall response and then execute agreed upon actions. CISA recommends remediating Act vulnerabilities as soon as possible.
var SsvcDecisionType_Act = SsvcDecisionType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType/act",
}

// SsvcDecisionType_Attend The vulnerability requires attention from the organization's internal, supervisory-level individuals. Necessary actions include requesting assistance or information about the vulnerability, and may involve publishing a notification either internally and/or externally. CISA recommends remediating Attend vulnerabilities sooner than standard update timelines.
var SsvcDecisionType_Attend = SsvcDecisionType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType/attend",
}

// SsvcDecisionType_Track The vulnerability does not require action at this time. The organization would continue to track the vulnerability and reassess it if new information becomes available. CISA recommends remediating Track vulnerabilities within standard update timelines.
var SsvcDecisionType_Track = SsvcDecisionType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType/track",
}

// SsvcDecisionType_TrackStar (\"Track\\*\" in the SSVC spec) The vulnerability contains specific characteristics that may require closer monitoring for changes. CISA recommends remediating Track\\* vulnerabilities within standard update timelines.
var SsvcDecisionType_TrackStar = SsvcDecisionType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType/trackStar",
}

type AnySsvcVulnAssessmentRelationship interface {
	asSsvcVulnAssessmentRelationship() *SsvcVulnAssessmentRelationship
}

// SsvcVulnAssessmentRelationship Provides an SSVC assessment for a vulnerability.
type SsvcVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/SsvcVulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// DecisionType Provide the enumeration of possible decisions in the\n[Stakeholder-Specific Vulnerability Categorization (SSVC) decision tree](https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc).
	DecisionType SsvcDecisionType `iri:"https://spdx.org/rdf/3.0.1/terms/Security/decisionType" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType"`
}

func (o *SsvcVulnAssessmentRelationship) asSsvcVulnAssessmentRelationship() *SsvcVulnAssessmentRelationship {
	return o
}

type SsvcVulnAssessmentRelationshipList []AnySsvcVulnAssessmentRelationship

func (o *SsvcVulnAssessmentRelationshipList) SsvcVulnAssessmentRelationships() ld.TypeSeq[AnySsvcVulnAssessmentRelationship, *SsvcVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castSsvcVulnAssessmentRelationship)
}

// SupportType Indicates the type of support that is associated with an artifact.
type SupportType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/SupportType"`
	id string  `iri:"@id"`
}

// SupportType_Deployed in addition to being supported by the supplier, the software is known to have been deployed and is in use.  For a software as a service provider, this implies the software is now available as a service.
var SupportType_Deployed = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/deployed",
}

// SupportType_Development the artifact is in active development and is not considered ready for formal support from the supplier.
var SupportType_Development = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/development",
}

// SupportType_EndOfSupport there is a defined end of support for the artifact from the supplier.  This may also be referred to as end of life. There is a validUntilDate that can be used to signal when support ends for the artifact.
var SupportType_EndOfSupport = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/endOfSupport",
}

// SupportType_LimitedSupport the artifact has been released, and there is limited support available from the supplier. There is a validUntilDate that can provide additional information about the duration of support.
var SupportType_LimitedSupport = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/limitedSupport",
}

// SupportType_NoAssertion no assertion about the type of support is made.   This is considered the default if no other support type is used.
var SupportType_NoAssertion = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/noAssertion",
}

// SupportType_NoSupport there is no support for the artifact from the supplier, consumer assumes any support obligations.
var SupportType_NoSupport = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/noSupport",
}

// SupportType_Support the artifact has been released, and is supported from the supplier.   There is a validUntilDate that can provide additional information about the duration of support.
var SupportType_Support = SupportType{
	id: "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/support",
}

type AnyTool interface {
	asTool() *Tool
}

// Tool An element of hardware and/or software utilized to carry out a particular function.
type Tool struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Core/Tool"`
	Element
}

func (o *Tool) asTool() *Tool {
	return o
}

type ToolList []AnyTool

func (o *ToolList) Tools() ld.TypeSeq[AnyTool, *Tool] {
	return ld.NewTypeSeq(*o, castTool)
}

type AnyVexAffectedVulnAssessmentRelationship interface {
	asVexAffectedVulnAssessmentRelationship() *VexAffectedVulnAssessmentRelationship
}

// VexAffectedVulnAssessmentRelationship Connects a vulnerability and an element designating the element as a product\naffected by the vulnerability.
type VexAffectedVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexAffectedVulnAssessmentRelationship"`
	VexVulnAssessmentRelationship
	// ActionStatement Provides advise on how to mitigate or remediate a vulnerability when a VEX product\nis affected by it.
	ActionStatement string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/actionStatement" required:"true" type:"http://www.w3.org/2001/XMLSchema#string"`
	// ActionStatementTime Records the time when a recommended action was communicated in a VEX statement\nto mitigate a vulnerability.
	ActionStatementTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/actionStatementTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
}

func (o *VexAffectedVulnAssessmentRelationship) asVexAffectedVulnAssessmentRelationship() *VexAffectedVulnAssessmentRelationship {
	return o
}

type VexAffectedVulnAssessmentRelationshipList []AnyVexAffectedVulnAssessmentRelationship

func (o *VexAffectedVulnAssessmentRelationshipList) VexAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVexAffectedVulnAssessmentRelationship, *VexAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexAffectedVulnAssessmentRelationship)
}

type AnyVexFixedVulnAssessmentRelationship interface {
	asVexFixedVulnAssessmentRelationship() *VexFixedVulnAssessmentRelationship
}

// VexFixedVulnAssessmentRelationship Links a vulnerability and elements representing products (in the VEX sense) where\na fix has been applied and are no longer affected.
type VexFixedVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexFixedVulnAssessmentRelationship"`
	VexVulnAssessmentRelationship
}

func (o *VexFixedVulnAssessmentRelationship) asVexFixedVulnAssessmentRelationship() *VexFixedVulnAssessmentRelationship {
	return o
}

type VexFixedVulnAssessmentRelationshipList []AnyVexFixedVulnAssessmentRelationship

func (o *VexFixedVulnAssessmentRelationshipList) VexFixedVulnAssessmentRelationships() ld.TypeSeq[AnyVexFixedVulnAssessmentRelationship, *VexFixedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexFixedVulnAssessmentRelationship)
}

// VexJustificationType Specifies the VEX justification type.
type VexJustificationType struct {
	_  ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType"`
	id string  `iri:"@id"`
}

// VexJustificationType_ComponentNotPresent The software is not affected because the vulnerable component is not in the product.
var VexJustificationType_ComponentNotPresent = VexJustificationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/componentNotPresent",
}

// VexJustificationType_InlineMitigationsAlreadyExist Built-in inline controls or mitigations prevent an adversary from leveraging the vulnerability.
var VexJustificationType_InlineMitigationsAlreadyExist = VexJustificationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/inlineMitigationsAlreadyExist",
}

// VexJustificationType_VulnerableCodeCannotBeControlledByAdversary The vulnerable component is present, and the component contains the vulnerable code. However, vulnerable code is used in such a way that an attacker cannot mount any anticipated attack.
var VexJustificationType_VulnerableCodeCannotBeControlledByAdversary = VexJustificationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/vulnerableCodeCannotBeControlledByAdversary",
}

// VexJustificationType_VulnerableCodeNotInExecutePath The affected code is not reachable through the execution of the code, including non-anticipated states of the product.
var VexJustificationType_VulnerableCodeNotInExecutePath = VexJustificationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/vulnerableCodeNotInExecutePath",
}

// VexJustificationType_VulnerableCodeNotPresent The product is not affected because the code underlying the vulnerability is not present in the product.
var VexJustificationType_VulnerableCodeNotPresent = VexJustificationType{
	id: "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/vulnerableCodeNotPresent",
}

type AnyVexNotAffectedVulnAssessmentRelationship interface {
	asVexNotAffectedVulnAssessmentRelationship() *VexNotAffectedVulnAssessmentRelationship
}

// VexNotAffectedVulnAssessmentRelationship Links a vulnerability and one or more elements designating the latter as products\nnot affected by the vulnerability.
type VexNotAffectedVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexNotAffectedVulnAssessmentRelationship"`
	VexVulnAssessmentRelationship
	// ImpactStatementTime Timestamp of impact statement.
	ImpactStatementTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/impactStatementTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// ImpactStatement Explains why a VEX product is not affected by a vulnerability. It is an\nalternative in VexNotAffectedVulnAssessmentRelationship to the machine-readable\njustification label.
	ImpactStatement string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/impactStatement" type:"http://www.w3.org/2001/XMLSchema#string"`
	// JustificationType Impact justification label to be used when linking a vulnerability to an element\nrepresenting a VEX product with a VexNotAffectedVulnAssessmentRelationship\nrelationship.
	JustificationType VexJustificationType `iri:"https://spdx.org/rdf/3.0.1/terms/Security/justificationType" type:"https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType"`
}

func (o *VexNotAffectedVulnAssessmentRelationship) asVexNotAffectedVulnAssessmentRelationship() *VexNotAffectedVulnAssessmentRelationship {
	return o
}

type VexNotAffectedVulnAssessmentRelationshipList []AnyVexNotAffectedVulnAssessmentRelationship

func (o *VexNotAffectedVulnAssessmentRelationshipList) VexNotAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVexNotAffectedVulnAssessmentRelationship, *VexNotAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexNotAffectedVulnAssessmentRelationship)
}

type AnyVexUnderInvestigationVulnAssessmentRelationship interface {
	asVexUnderInvestigationVulnAssessmentRelationship() *VexUnderInvestigationVulnAssessmentRelationship
}

// VexUnderInvestigationVulnAssessmentRelationship Designates elements as products where the impact of a vulnerability is being\ninvestigated.
type VexUnderInvestigationVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexUnderInvestigationVulnAssessmentRelationship"`
	VexVulnAssessmentRelationship
}

func (o *VexUnderInvestigationVulnAssessmentRelationship) asVexUnderInvestigationVulnAssessmentRelationship() *VexUnderInvestigationVulnAssessmentRelationship {
	return o
}

type VexUnderInvestigationVulnAssessmentRelationshipList []AnyVexUnderInvestigationVulnAssessmentRelationship

func (o *VexUnderInvestigationVulnAssessmentRelationshipList) VexUnderInvestigationVulnAssessmentRelationships() ld.TypeSeq[AnyVexUnderInvestigationVulnAssessmentRelationship, *VexUnderInvestigationVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexUnderInvestigationVulnAssessmentRelationship)
}

type AnyVexVulnAssessmentRelationship interface {
	asVexVulnAssessmentRelationship() *VexVulnAssessmentRelationship
}

// VexVulnAssessmentRelationship Abstract ancestor class for all VEX relationships
type VexVulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VexVulnAssessmentRelationship"`
	VulnAssessmentRelationship
	// StatusNotes Conveys information about how VEX status was determined.
	StatusNotes string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/statusNotes" type:"http://www.w3.org/2001/XMLSchema#string"`
	// VexVersion Specifies the version of a VEX statement.
	VexVersion string `iri:"https://spdx.org/rdf/3.0.1/terms/Security/vexVersion" type:"http://www.w3.org/2001/XMLSchema#string"`
}

func (o *VexVulnAssessmentRelationship) asVexVulnAssessmentRelationship() *VexVulnAssessmentRelationship {
	return o
}

type VexVulnAssessmentRelationshipList []AnyVexVulnAssessmentRelationship

func (o *VexVulnAssessmentRelationshipList) VexAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVexVulnAssessmentRelationship, *VexAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexAffectedVulnAssessmentRelationship)
}

func (o *VexVulnAssessmentRelationshipList) VexFixedVulnAssessmentRelationships() ld.TypeSeq[AnyVexVulnAssessmentRelationship, *VexFixedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexFixedVulnAssessmentRelationship)
}

func (o *VexVulnAssessmentRelationshipList) VexNotAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVexVulnAssessmentRelationship, *VexNotAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexNotAffectedVulnAssessmentRelationship)
}

func (o *VexVulnAssessmentRelationshipList) VexUnderInvestigationVulnAssessmentRelationships() ld.TypeSeq[AnyVexVulnAssessmentRelationship, *VexUnderInvestigationVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexUnderInvestigationVulnAssessmentRelationship)
}

func (o *VexVulnAssessmentRelationshipList) VexVulnAssessmentRelationships() ld.TypeSeq[AnyVexVulnAssessmentRelationship, *VexVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexVulnAssessmentRelationship)
}

type AnyVulnAssessmentRelationship interface {
	asVulnAssessmentRelationship() *VulnAssessmentRelationship
}

// VulnAssessmentRelationship Abstract ancestor class for all vulnerability assessments
type VulnAssessmentRelationship struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/VulnAssessmentRelationship"`
	Relationship
	// SuppliedBy Identifies who or what supplied the artifact or VulnAssessmentRelationship\nreferenced by the Element.
	SuppliedBy AnyAgent `iri:"https://spdx.org/rdf/3.0.1/terms/Core/suppliedBy" type:"https://spdx.org/rdf/3.0.1/terms/Core/Agent"`
	// WithdrawnTime Specified the time and date when a vulnerability was withdrawn.
	WithdrawnTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/withdrawnTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// AssessedElement Specifies an Element contained in a piece of software where a vulnerability was\nfound.
	AssessedElement AnySoftwareArtifact `iri:"https://spdx.org/rdf/3.0.1/terms/Security/assessedElement" type:"https://spdx.org/rdf/3.0.1/terms/Software/SoftwareArtifact"`
	// PublishedTime Specifies the time when a vulnerability was published.
	PublishedTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/publishedTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// ModifiedTime Specifies a time when a vulnerability assessment was modified
	ModifiedTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/modifiedTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
}

func (o *VulnAssessmentRelationship) asVulnAssessmentRelationship() *VulnAssessmentRelationship {
	return o
}

type VulnAssessmentRelationshipList []AnyVulnAssessmentRelationship

func (o *VulnAssessmentRelationshipList) CvssV2VulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *CvssV2VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV2VulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) CvssV3VulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *CvssV3VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV3VulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) CvssV4VulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *CvssV4VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castCvssV4VulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) EpssVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *EpssVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castEpssVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) ExploitCatalogVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *ExploitCatalogVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castExploitCatalogVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) SsvcVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *SsvcVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castSsvcVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VexAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VexAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexAffectedVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VexFixedVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VexFixedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexFixedVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VexNotAffectedVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VexNotAffectedVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexNotAffectedVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VexUnderInvestigationVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VexUnderInvestigationVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexUnderInvestigationVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VexVulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VexVulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVexVulnAssessmentRelationship)
}

func (o *VulnAssessmentRelationshipList) VulnAssessmentRelationships() ld.TypeSeq[AnyVulnAssessmentRelationship, *VulnAssessmentRelationship] {
	return ld.NewTypeSeq(*o, castVulnAssessmentRelationship)
}

type AnyVulnerability interface {
	asVulnerability() *Vulnerability
}

// Vulnerability Specifies a vulnerability and its associated information.
type Vulnerability struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/Security/Vulnerability"`
	Artifact
	// WithdrawnTime Specified the time and date when a vulnerability was withdrawn.
	WithdrawnTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/withdrawnTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// ModifiedTime Specifies a time when a vulnerability assessment was modified
	ModifiedTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/modifiedTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
	// PublishedTime Specifies the time when a vulnerability was published.
	PublishedTime time.Time `iri:"https://spdx.org/rdf/3.0.1/terms/Security/publishedTime" type:"http://www.w3.org/2001/XMLSchema#dateTimeStamp"`
}

func (o *Vulnerability) asVulnerability() *Vulnerability {
	return o
}

type VulnerabilityList []AnyVulnerability

func (o *VulnerabilityList) Vulnerabilities() ld.TypeSeq[AnyVulnerability, *Vulnerability] {
	return ld.NewTypeSeq(*o, castVulnerability)
}

type AnyWithAdditionOperator interface {
	asWithAdditionOperator() *WithAdditionOperator
}

// WithAdditionOperator Portion of an AnyLicenseInfo representing a License which has additional\ntext applied to it.
type WithAdditionOperator struct {
	_ ld.Type `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/WithAdditionOperator"`
	LicenseInfo
	// SubjectExtendableLicense A License participating in a 'with addition' model.
	SubjectExtendableLicense AnyExtendableLicense `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectExtendableLicense" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ExtendableLicense"`
	// SubjectAddition A LicenseAddition participating in a 'with addition' model.
	SubjectAddition AnyLicenseAddition `iri:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectAddition" required:"true" type:"https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/LicenseAddition"`
}

func (o *WithAdditionOperator) asWithAdditionOperator() *WithAdditionOperator {
	return o
}

type WithAdditionOperatorList []AnyWithAdditionOperator

func (o *WithAdditionOperatorList) WithAdditionOperators() ld.TypeSeq[AnyWithAdditionOperator, *WithAdditionOperator] {
	return ld.NewTypeSeq(*o, castWithAdditionOperator)
}

type ExternalIRI struct {
	id    string `iri:"@id"`
	value any
}

func NewExternalIRI(id string) *ExternalIRI {
	return &ExternalIRI{
		id: id,
	}
}

func (o *ExternalIRI) asAIPackage() *AIPackage {
	return castAIPackage(o.value)
}

func (o *ExternalIRI) asAgent() *Agent {
	return castAgent(o.value)
}

func (o *ExternalIRI) asAnnotation() *Annotation {
	return castAnnotation(o.value)
}

func (o *ExternalIRI) asArtifact() *Artifact {
	return castArtifact(o.value)
}

func (o *ExternalIRI) asBom() *Bom {
	return castBom(o.value)
}

func (o *ExternalIRI) asBuild() *Build {
	return castBuild(o.value)
}

func (o *ExternalIRI) asBundle() *Bundle {
	return castBundle(o.value)
}

func (o *ExternalIRI) asCdxPropertiesExtension() *CdxPropertiesExtension {
	return castCdxPropertiesExtension(o.value)
}

func (o *ExternalIRI) asCdxPropertyEntry() *CdxPropertyEntry {
	return castCdxPropertyEntry(o.value)
}

func (o *ExternalIRI) asConjunctiveLicenseSet() *ConjunctiveLicenseSet {
	return castConjunctiveLicenseSet(o.value)
}

func (o *ExternalIRI) asContentIdentifier() *ContentIdentifier {
	return castContentIdentifier(o.value)
}

func (o *ExternalIRI) asCreationInfo() *CreationInfo {
	return castCreationInfo(o.value)
}

func (o *ExternalIRI) asCustomLicense() *CustomLicense {
	return castCustomLicense(o.value)
}

func (o *ExternalIRI) asCustomLicenseAddition() *CustomLicenseAddition {
	return castCustomLicenseAddition(o.value)
}

func (o *ExternalIRI) asCvssV2VulnAssessmentRelationship() *CvssV2VulnAssessmentRelationship {
	return castCvssV2VulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asCvssV3VulnAssessmentRelationship() *CvssV3VulnAssessmentRelationship {
	return castCvssV3VulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asCvssV4VulnAssessmentRelationship() *CvssV4VulnAssessmentRelationship {
	return castCvssV4VulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asDatasetPackage() *DatasetPackage {
	return castDatasetPackage(o.value)
}

func (o *ExternalIRI) asDictionaryEntry() *DictionaryEntry {
	return castDictionaryEntry(o.value)
}

func (o *ExternalIRI) asDisjunctiveLicenseSet() *DisjunctiveLicenseSet {
	return castDisjunctiveLicenseSet(o.value)
}

func (o *ExternalIRI) asElement() *Element {
	return castElement(o.value)
}

func (o *ExternalIRI) asElementCollection() *ElementCollection {
	return castElementCollection(o.value)
}

func (o *ExternalIRI) asEnergyConsumption() *EnergyConsumption {
	return castEnergyConsumption(o.value)
}

func (o *ExternalIRI) asEnergyConsumptionDescription() *EnergyConsumptionDescription {
	return castEnergyConsumptionDescription(o.value)
}

func (o *ExternalIRI) asEpssVulnAssessmentRelationship() *EpssVulnAssessmentRelationship {
	return castEpssVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asExploitCatalogVulnAssessmentRelationship() *ExploitCatalogVulnAssessmentRelationship {
	return castExploitCatalogVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asExtendableLicense() *ExtendableLicense {
	return castExtendableLicense(o.value)
}

func (o *ExternalIRI) asExternalIdentifier() *ExternalIdentifier {
	return castExternalIdentifier(o.value)
}

func (o *ExternalIRI) asExternalMap() *ExternalMap {
	return castExternalMap(o.value)
}

func (o *ExternalIRI) asExternalRef() *ExternalRef {
	return castExternalRef(o.value)
}

func (o *ExternalIRI) asFile() *File {
	return castFile(o.value)
}

func (o *ExternalIRI) asHash() *Hash {
	return castHash(o.value)
}

func (o *ExternalIRI) asIndividualElement() *IndividualElement {
	return castIndividualElement(o.value)
}

func (o *ExternalIRI) asIndividualLicensingInfo() *IndividualLicensingInfo {
	return castIndividualLicensingInfo(o.value)
}

func (o *ExternalIRI) asIntegrityMethod() *IntegrityMethod {
	return castIntegrityMethod(o.value)
}

func (o *ExternalIRI) asLicense() *License {
	return castLicense(o.value)
}

func (o *ExternalIRI) asLicenseAddition() *LicenseAddition {
	return castLicenseAddition(o.value)
}

func (o *ExternalIRI) asLicenseExpression() *LicenseExpression {
	return castLicenseExpression(o.value)
}

func (o *ExternalIRI) asLicenseInfo() *LicenseInfo {
	return castLicenseInfo(o.value)
}

func (o *ExternalIRI) asLifecycleScopedRelationship() *LifecycleScopedRelationship {
	return castLifecycleScopedRelationship(o.value)
}

func (o *ExternalIRI) asListedLicense() *ListedLicense {
	return castListedLicense(o.value)
}

func (o *ExternalIRI) asListedLicenseException() *ListedLicenseException {
	return castListedLicenseException(o.value)
}

func (o *ExternalIRI) asNamespaceMap() *NamespaceMap {
	return castNamespaceMap(o.value)
}

func (o *ExternalIRI) asOrLaterOperator() *OrLaterOperator {
	return castOrLaterOperator(o.value)
}

func (o *ExternalIRI) asOrganization() *Organization {
	return castOrganization(o.value)
}

func (o *ExternalIRI) asPackage() *Package {
	return castPackage(o.value)
}

func (o *ExternalIRI) asPackageVerificationCode() *PackageVerificationCode {
	return castPackageVerificationCode(o.value)
}

func (o *ExternalIRI) asPerson() *Person {
	return castPerson(o.value)
}

func (o *ExternalIRI) asPositiveIntegerRange() *PositiveIntegerRange {
	return castPositiveIntegerRange(o.value)
}

func (o *ExternalIRI) asRelationship() *Relationship {
	return castRelationship(o.value)
}

func (o *ExternalIRI) asSbom() *Sbom {
	return castSbom(o.value)
}

func (o *ExternalIRI) asSimpleLicensingText() *SimpleLicensingText {
	return castSimpleLicensingText(o.value)
}

func (o *ExternalIRI) asSnippet() *Snippet {
	return castSnippet(o.value)
}

func (o *ExternalIRI) asSoftwareAgent() *SoftwareAgent {
	return castSoftwareAgent(o.value)
}

func (o *ExternalIRI) asSoftwareArtifact() *SoftwareArtifact {
	return castSoftwareArtifact(o.value)
}

func (o *ExternalIRI) asSpdxDocument() *SpdxDocument {
	return castSpdxDocument(o.value)
}

func (o *ExternalIRI) asSsvcVulnAssessmentRelationship() *SsvcVulnAssessmentRelationship {
	return castSsvcVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asTool() *Tool {
	return castTool(o.value)
}

func (o *ExternalIRI) asVexAffectedVulnAssessmentRelationship() *VexAffectedVulnAssessmentRelationship {
	return castVexAffectedVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVexFixedVulnAssessmentRelationship() *VexFixedVulnAssessmentRelationship {
	return castVexFixedVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVexNotAffectedVulnAssessmentRelationship() *VexNotAffectedVulnAssessmentRelationship {
	return castVexNotAffectedVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVexUnderInvestigationVulnAssessmentRelationship() *VexUnderInvestigationVulnAssessmentRelationship {
	return castVexUnderInvestigationVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVexVulnAssessmentRelationship() *VexVulnAssessmentRelationship {
	return castVexVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVulnAssessmentRelationship() *VulnAssessmentRelationship {
	return castVulnAssessmentRelationship(o.value)
}

func (o *ExternalIRI) asVulnerability() *Vulnerability {
	return castVulnerability(o.value)
}

func (o *ExternalIRI) asWithAdditionOperator() *WithAdditionOperator {
	return castWithAdditionOperator(o.value)
}

func castAIPackage(o any) *AIPackage {
	if o, ok := o.(AnyAIPackage); ok {
		return o.asAIPackage()
	}
	return nil
}

func castAgent(o any) *Agent {
	if o, ok := o.(AnyAgent); ok {
		return o.asAgent()
	}
	return nil
}

func castAnnotation(o any) *Annotation {
	if o, ok := o.(AnyAnnotation); ok {
		return o.asAnnotation()
	}
	return nil
}

func castArtifact(o any) *Artifact {
	if o, ok := o.(AnyArtifact); ok {
		return o.asArtifact()
	}
	return nil
}

func castBom(o any) *Bom {
	if o, ok := o.(AnyBom); ok {
		return o.asBom()
	}
	return nil
}

func castBuild(o any) *Build {
	if o, ok := o.(AnyBuild); ok {
		return o.asBuild()
	}
	return nil
}

func castBundle(o any) *Bundle {
	if o, ok := o.(AnyBundle); ok {
		return o.asBundle()
	}
	return nil
}

func castCdxPropertiesExtension(o any) *CdxPropertiesExtension {
	if o, ok := o.(AnyCdxPropertiesExtension); ok {
		return o.asCdxPropertiesExtension()
	}
	return nil
}

func castCdxPropertyEntry(o any) *CdxPropertyEntry {
	if o, ok := o.(AnyCdxPropertyEntry); ok {
		return o.asCdxPropertyEntry()
	}
	return nil
}

func castConjunctiveLicenseSet(o any) *ConjunctiveLicenseSet {
	if o, ok := o.(AnyConjunctiveLicenseSet); ok {
		return o.asConjunctiveLicenseSet()
	}
	return nil
}

func castContentIdentifier(o any) *ContentIdentifier {
	if o, ok := o.(AnyContentIdentifier); ok {
		return o.asContentIdentifier()
	}
	return nil
}

func castCreationInfo(o any) *CreationInfo {
	if o, ok := o.(AnyCreationInfo); ok {
		return o.asCreationInfo()
	}
	return nil
}

func castCustomLicense(o any) *CustomLicense {
	if o, ok := o.(AnyCustomLicense); ok {
		return o.asCustomLicense()
	}
	return nil
}

func castCustomLicenseAddition(o any) *CustomLicenseAddition {
	if o, ok := o.(AnyCustomLicenseAddition); ok {
		return o.asCustomLicenseAddition()
	}
	return nil
}

func castCvssV2VulnAssessmentRelationship(o any) *CvssV2VulnAssessmentRelationship {
	if o, ok := o.(AnyCvssV2VulnAssessmentRelationship); ok {
		return o.asCvssV2VulnAssessmentRelationship()
	}
	return nil
}

func castCvssV3VulnAssessmentRelationship(o any) *CvssV3VulnAssessmentRelationship {
	if o, ok := o.(AnyCvssV3VulnAssessmentRelationship); ok {
		return o.asCvssV3VulnAssessmentRelationship()
	}
	return nil
}

func castCvssV4VulnAssessmentRelationship(o any) *CvssV4VulnAssessmentRelationship {
	if o, ok := o.(AnyCvssV4VulnAssessmentRelationship); ok {
		return o.asCvssV4VulnAssessmentRelationship()
	}
	return nil
}

func castDatasetPackage(o any) *DatasetPackage {
	if o, ok := o.(AnyDatasetPackage); ok {
		return o.asDatasetPackage()
	}
	return nil
}

func castDictionaryEntry(o any) *DictionaryEntry {
	if o, ok := o.(AnyDictionaryEntry); ok {
		return o.asDictionaryEntry()
	}
	return nil
}

func castDisjunctiveLicenseSet(o any) *DisjunctiveLicenseSet {
	if o, ok := o.(AnyDisjunctiveLicenseSet); ok {
		return o.asDisjunctiveLicenseSet()
	}
	return nil
}

func castElement(o any) *Element {
	if o, ok := o.(AnyElement); ok {
		return o.asElement()
	}
	return nil
}

func castElementCollection(o any) *ElementCollection {
	if o, ok := o.(AnyElementCollection); ok {
		return o.asElementCollection()
	}
	return nil
}

func castEnergyConsumption(o any) *EnergyConsumption {
	if o, ok := o.(AnyEnergyConsumption); ok {
		return o.asEnergyConsumption()
	}
	return nil
}

func castEnergyConsumptionDescription(o any) *EnergyConsumptionDescription {
	if o, ok := o.(AnyEnergyConsumptionDescription); ok {
		return o.asEnergyConsumptionDescription()
	}
	return nil
}

func castEpssVulnAssessmentRelationship(o any) *EpssVulnAssessmentRelationship {
	if o, ok := o.(AnyEpssVulnAssessmentRelationship); ok {
		return o.asEpssVulnAssessmentRelationship()
	}
	return nil
}

func castExploitCatalogVulnAssessmentRelationship(o any) *ExploitCatalogVulnAssessmentRelationship {
	if o, ok := o.(AnyExploitCatalogVulnAssessmentRelationship); ok {
		return o.asExploitCatalogVulnAssessmentRelationship()
	}
	return nil
}

func castExtendableLicense(o any) *ExtendableLicense {
	if o, ok := o.(AnyExtendableLicense); ok {
		return o.asExtendableLicense()
	}
	return nil
}

func castExternalIdentifier(o any) *ExternalIdentifier {
	if o, ok := o.(AnyExternalIdentifier); ok {
		return o.asExternalIdentifier()
	}
	return nil
}

func castExternalMap(o any) *ExternalMap {
	if o, ok := o.(AnyExternalMap); ok {
		return o.asExternalMap()
	}
	return nil
}

func castExternalRef(o any) *ExternalRef {
	if o, ok := o.(AnyExternalRef); ok {
		return o.asExternalRef()
	}
	return nil
}

func castFile(o any) *File {
	if o, ok := o.(AnyFile); ok {
		return o.asFile()
	}
	return nil
}

func castHash(o any) *Hash {
	if o, ok := o.(AnyHash); ok {
		return o.asHash()
	}
	return nil
}

func castIndividualElement(o any) *IndividualElement {
	if o, ok := o.(AnyIndividualElement); ok {
		return o.asIndividualElement()
	}
	return nil
}

func castIndividualLicensingInfo(o any) *IndividualLicensingInfo {
	if o, ok := o.(AnyIndividualLicensingInfo); ok {
		return o.asIndividualLicensingInfo()
	}
	return nil
}

func castIntegrityMethod(o any) *IntegrityMethod {
	if o, ok := o.(AnyIntegrityMethod); ok {
		return o.asIntegrityMethod()
	}
	return nil
}

func castLicense(o any) *License {
	if o, ok := o.(AnyLicense); ok {
		return o.asLicense()
	}
	return nil
}

func castLicenseAddition(o any) *LicenseAddition {
	if o, ok := o.(AnyLicenseAddition); ok {
		return o.asLicenseAddition()
	}
	return nil
}

func castLicenseExpression(o any) *LicenseExpression {
	if o, ok := o.(AnyLicenseExpression); ok {
		return o.asLicenseExpression()
	}
	return nil
}

func castLicenseInfo(o any) *LicenseInfo {
	if o, ok := o.(AnyLicenseInfo); ok {
		return o.asLicenseInfo()
	}
	return nil
}

func castLifecycleScopedRelationship(o any) *LifecycleScopedRelationship {
	if o, ok := o.(AnyLifecycleScopedRelationship); ok {
		return o.asLifecycleScopedRelationship()
	}
	return nil
}

func castListedLicense(o any) *ListedLicense {
	if o, ok := o.(AnyListedLicense); ok {
		return o.asListedLicense()
	}
	return nil
}

func castListedLicenseException(o any) *ListedLicenseException {
	if o, ok := o.(AnyListedLicenseException); ok {
		return o.asListedLicenseException()
	}
	return nil
}

func castNamespaceMap(o any) *NamespaceMap {
	if o, ok := o.(AnyNamespaceMap); ok {
		return o.asNamespaceMap()
	}
	return nil
}

func castOrLaterOperator(o any) *OrLaterOperator {
	if o, ok := o.(AnyOrLaterOperator); ok {
		return o.asOrLaterOperator()
	}
	return nil
}

func castOrganization(o any) *Organization {
	if o, ok := o.(AnyOrganization); ok {
		return o.asOrganization()
	}
	return nil
}

func castPackage(o any) *Package {
	if o, ok := o.(AnyPackage); ok {
		return o.asPackage()
	}
	return nil
}

func castPackageVerificationCode(o any) *PackageVerificationCode {
	if o, ok := o.(AnyPackageVerificationCode); ok {
		return o.asPackageVerificationCode()
	}
	return nil
}

func castPerson(o any) *Person {
	if o, ok := o.(AnyPerson); ok {
		return o.asPerson()
	}
	return nil
}

func castPositiveIntegerRange(o any) *PositiveIntegerRange {
	if o, ok := o.(AnyPositiveIntegerRange); ok {
		return o.asPositiveIntegerRange()
	}
	return nil
}

func castRelationship(o any) *Relationship {
	if o, ok := o.(AnyRelationship); ok {
		return o.asRelationship()
	}
	return nil
}

func castSbom(o any) *Sbom {
	if o, ok := o.(AnySbom); ok {
		return o.asSbom()
	}
	return nil
}

func castSimpleLicensingText(o any) *SimpleLicensingText {
	if o, ok := o.(AnySimpleLicensingText); ok {
		return o.asSimpleLicensingText()
	}
	return nil
}

func castSnippet(o any) *Snippet {
	if o, ok := o.(AnySnippet); ok {
		return o.asSnippet()
	}
	return nil
}

func castSoftwareAgent(o any) *SoftwareAgent {
	if o, ok := o.(AnySoftwareAgent); ok {
		return o.asSoftwareAgent()
	}
	return nil
}

func castSoftwareArtifact(o any) *SoftwareArtifact {
	if o, ok := o.(AnySoftwareArtifact); ok {
		return o.asSoftwareArtifact()
	}
	return nil
}

func castSpdxDocument(o any) *SpdxDocument {
	if o, ok := o.(AnySpdxDocument); ok {
		return o.asSpdxDocument()
	}
	return nil
}

func castSsvcVulnAssessmentRelationship(o any) *SsvcVulnAssessmentRelationship {
	if o, ok := o.(AnySsvcVulnAssessmentRelationship); ok {
		return o.asSsvcVulnAssessmentRelationship()
	}
	return nil
}

func castTool(o any) *Tool {
	if o, ok := o.(AnyTool); ok {
		return o.asTool()
	}
	return nil
}

func castVexAffectedVulnAssessmentRelationship(o any) *VexAffectedVulnAssessmentRelationship {
	if o, ok := o.(AnyVexAffectedVulnAssessmentRelationship); ok {
		return o.asVexAffectedVulnAssessmentRelationship()
	}
	return nil
}

func castVexFixedVulnAssessmentRelationship(o any) *VexFixedVulnAssessmentRelationship {
	if o, ok := o.(AnyVexFixedVulnAssessmentRelationship); ok {
		return o.asVexFixedVulnAssessmentRelationship()
	}
	return nil
}

func castVexNotAffectedVulnAssessmentRelationship(o any) *VexNotAffectedVulnAssessmentRelationship {
	if o, ok := o.(AnyVexNotAffectedVulnAssessmentRelationship); ok {
		return o.asVexNotAffectedVulnAssessmentRelationship()
	}
	return nil
}

func castVexUnderInvestigationVulnAssessmentRelationship(o any) *VexUnderInvestigationVulnAssessmentRelationship {
	if o, ok := o.(AnyVexUnderInvestigationVulnAssessmentRelationship); ok {
		return o.asVexUnderInvestigationVulnAssessmentRelationship()
	}
	return nil
}

func castVexVulnAssessmentRelationship(o any) *VexVulnAssessmentRelationship {
	if o, ok := o.(AnyVexVulnAssessmentRelationship); ok {
		return o.asVexVulnAssessmentRelationship()
	}
	return nil
}

func castVulnAssessmentRelationship(o any) *VulnAssessmentRelationship {
	if o, ok := o.(AnyVulnAssessmentRelationship); ok {
		return o.asVulnAssessmentRelationship()
	}
	return nil
}

func castVulnerability(o any) *Vulnerability {
	if o, ok := o.(AnyVulnerability); ok {
		return o.asVulnerability()
	}
	return nil
}

func castWithAdditionOperator(o any) *WithAdditionOperator {
	if o, ok := o.(AnyWithAdditionOperator); ok {
		return o.asWithAdditionOperator()
	}
	return nil
}

func cast[T any](value any) *T {
	var t T
	switch any(t).(type) {
	case AIPackage:
		if v, ok := any(castAIPackage(value)).(*T); ok {
			return v
		}
	case Agent:
		if v, ok := any(castAgent(value)).(*T); ok {
			return v
		}
	case Annotation:
		if v, ok := any(castAnnotation(value)).(*T); ok {
			return v
		}
	case Artifact:
		if v, ok := any(castArtifact(value)).(*T); ok {
			return v
		}
	case Bom:
		if v, ok := any(castBom(value)).(*T); ok {
			return v
		}
	case Build:
		if v, ok := any(castBuild(value)).(*T); ok {
			return v
		}
	case Bundle:
		if v, ok := any(castBundle(value)).(*T); ok {
			return v
		}
	case CdxPropertiesExtension:
		if v, ok := any(castCdxPropertiesExtension(value)).(*T); ok {
			return v
		}
	case CdxPropertyEntry:
		if v, ok := any(castCdxPropertyEntry(value)).(*T); ok {
			return v
		}
	case ConjunctiveLicenseSet:
		if v, ok := any(castConjunctiveLicenseSet(value)).(*T); ok {
			return v
		}
	case ContentIdentifier:
		if v, ok := any(castContentIdentifier(value)).(*T); ok {
			return v
		}
	case CreationInfo:
		if v, ok := any(castCreationInfo(value)).(*T); ok {
			return v
		}
	case CustomLicense:
		if v, ok := any(castCustomLicense(value)).(*T); ok {
			return v
		}
	case CustomLicenseAddition:
		if v, ok := any(castCustomLicenseAddition(value)).(*T); ok {
			return v
		}
	case CvssV2VulnAssessmentRelationship:
		if v, ok := any(castCvssV2VulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case CvssV3VulnAssessmentRelationship:
		if v, ok := any(castCvssV3VulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case CvssV4VulnAssessmentRelationship:
		if v, ok := any(castCvssV4VulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case DatasetPackage:
		if v, ok := any(castDatasetPackage(value)).(*T); ok {
			return v
		}
	case DictionaryEntry:
		if v, ok := any(castDictionaryEntry(value)).(*T); ok {
			return v
		}
	case DisjunctiveLicenseSet:
		if v, ok := any(castDisjunctiveLicenseSet(value)).(*T); ok {
			return v
		}
	case Element:
		if v, ok := any(castElement(value)).(*T); ok {
			return v
		}
	case ElementCollection:
		if v, ok := any(castElementCollection(value)).(*T); ok {
			return v
		}
	case EnergyConsumption:
		if v, ok := any(castEnergyConsumption(value)).(*T); ok {
			return v
		}
	case EnergyConsumptionDescription:
		if v, ok := any(castEnergyConsumptionDescription(value)).(*T); ok {
			return v
		}
	case EpssVulnAssessmentRelationship:
		if v, ok := any(castEpssVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case ExploitCatalogVulnAssessmentRelationship:
		if v, ok := any(castExploitCatalogVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case ExtendableLicense:
		if v, ok := any(castExtendableLicense(value)).(*T); ok {
			return v
		}
	case ExternalIdentifier:
		if v, ok := any(castExternalIdentifier(value)).(*T); ok {
			return v
		}
	case ExternalMap:
		if v, ok := any(castExternalMap(value)).(*T); ok {
			return v
		}
	case ExternalRef:
		if v, ok := any(castExternalRef(value)).(*T); ok {
			return v
		}
	case File:
		if v, ok := any(castFile(value)).(*T); ok {
			return v
		}
	case Hash:
		if v, ok := any(castHash(value)).(*T); ok {
			return v
		}
	case IndividualElement:
		if v, ok := any(castIndividualElement(value)).(*T); ok {
			return v
		}
	case IndividualLicensingInfo:
		if v, ok := any(castIndividualLicensingInfo(value)).(*T); ok {
			return v
		}
	case IntegrityMethod:
		if v, ok := any(castIntegrityMethod(value)).(*T); ok {
			return v
		}
	case License:
		if v, ok := any(castLicense(value)).(*T); ok {
			return v
		}
	case LicenseAddition:
		if v, ok := any(castLicenseAddition(value)).(*T); ok {
			return v
		}
	case LicenseExpression:
		if v, ok := any(castLicenseExpression(value)).(*T); ok {
			return v
		}
	case LicenseInfo:
		if v, ok := any(castLicenseInfo(value)).(*T); ok {
			return v
		}
	case LifecycleScopedRelationship:
		if v, ok := any(castLifecycleScopedRelationship(value)).(*T); ok {
			return v
		}
	case ListedLicense:
		if v, ok := any(castListedLicense(value)).(*T); ok {
			return v
		}
	case ListedLicenseException:
		if v, ok := any(castListedLicenseException(value)).(*T); ok {
			return v
		}
	case NamespaceMap:
		if v, ok := any(castNamespaceMap(value)).(*T); ok {
			return v
		}
	case OrLaterOperator:
		if v, ok := any(castOrLaterOperator(value)).(*T); ok {
			return v
		}
	case Organization:
		if v, ok := any(castOrganization(value)).(*T); ok {
			return v
		}
	case Package:
		if v, ok := any(castPackage(value)).(*T); ok {
			return v
		}
	case PackageVerificationCode:
		if v, ok := any(castPackageVerificationCode(value)).(*T); ok {
			return v
		}
	case Person:
		if v, ok := any(castPerson(value)).(*T); ok {
			return v
		}
	case PositiveIntegerRange:
		if v, ok := any(castPositiveIntegerRange(value)).(*T); ok {
			return v
		}
	case Relationship:
		if v, ok := any(castRelationship(value)).(*T); ok {
			return v
		}
	case Sbom:
		if v, ok := any(castSbom(value)).(*T); ok {
			return v
		}
	case SimpleLicensingText:
		if v, ok := any(castSimpleLicensingText(value)).(*T); ok {
			return v
		}
	case Snippet:
		if v, ok := any(castSnippet(value)).(*T); ok {
			return v
		}
	case SoftwareAgent:
		if v, ok := any(castSoftwareAgent(value)).(*T); ok {
			return v
		}
	case SoftwareArtifact:
		if v, ok := any(castSoftwareArtifact(value)).(*T); ok {
			return v
		}
	case SpdxDocument:
		if v, ok := any(castSpdxDocument(value)).(*T); ok {
			return v
		}
	case SsvcVulnAssessmentRelationship:
		if v, ok := any(castSsvcVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case Tool:
		if v, ok := any(castTool(value)).(*T); ok {
			return v
		}
	case VexAffectedVulnAssessmentRelationship:
		if v, ok := any(castVexAffectedVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case VexFixedVulnAssessmentRelationship:
		if v, ok := any(castVexFixedVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case VexNotAffectedVulnAssessmentRelationship:
		if v, ok := any(castVexNotAffectedVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case VexUnderInvestigationVulnAssessmentRelationship:
		if v, ok := any(castVexUnderInvestigationVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case VexVulnAssessmentRelationship:
		if v, ok := any(castVexVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case VulnAssessmentRelationship:
		if v, ok := any(castVulnAssessmentRelationship(value)).(*T); ok {
			return v
		}
	case Vulnerability:
		if v, ok := any(castVulnerability(value)).(*T); ok {
			return v
		}
	case WithAdditionOperator:
		if v, ok := any(castWithAdditionOperator(value)).(*T); ok {
			return v
		}
	}
	panic("invalid type cast, unknown type: " + reflect.TypeOf(t).String())
}

func As[T any, R any](value any, fn func(v *T) R) R {
	v := cast[T](value)
	if v != nil {
		return fn(v)
	}
	var r R
	return r
}

func context() ld.Context {
	return ld.NewContext().Register("https://spdx.org/rdf/3.0.1/spdx-context.jsonld", map[string]any{"@context": map[string]any{
		"Agent":                           "https://spdx.org/rdf/3.0.1/terms/Core/Agent",
		"Annotation":                      "https://spdx.org/rdf/3.0.1/terms/Core/Annotation",
		"AnnotationType":                  "https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType",
		"Artifact":                        "https://spdx.org/rdf/3.0.1/terms/Core/Artifact",
		"Bom":                             "https://spdx.org/rdf/3.0.1/terms/Core/Bom",
		"Bundle":                          "https://spdx.org/rdf/3.0.1/terms/Core/Bundle",
		"CreationInfo":                    "https://spdx.org/rdf/3.0.1/terms/Core/CreationInfo",
		"DictionaryEntry":                 "https://spdx.org/rdf/3.0.1/terms/Core/DictionaryEntry",
		"Element":                         "https://spdx.org/rdf/3.0.1/terms/Core/Element",
		"ElementCollection":               "https://spdx.org/rdf/3.0.1/terms/Core/ElementCollection",
		"ExternalIdentifier":              "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifier",
		"ExternalIdentifierType":          "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType",
		"ExternalMap":                     "https://spdx.org/rdf/3.0.1/terms/Core/ExternalMap",
		"ExternalRef":                     "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRef",
		"ExternalRefType":                 "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType",
		"Hash":                            "https://spdx.org/rdf/3.0.1/terms/Core/Hash",
		"HashAlgorithm":                   "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm",
		"IndividualElement":               "https://spdx.org/rdf/3.0.1/terms/Core/IndividualElement",
		"IntegrityMethod":                 "https://spdx.org/rdf/3.0.1/terms/Core/IntegrityMethod",
		"LifecycleScopeType":              "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType",
		"LifecycleScopedRelationship":     "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopedRelationship",
		"NamespaceMap":                    "https://spdx.org/rdf/3.0.1/terms/Core/NamespaceMap",
		"NoAssertionElement":              "https://spdx.org/rdf/3.0.1/terms/Core/NoAssertionElement",
		"NoneElement":                     "https://spdx.org/rdf/3.0.1/terms/Core/NoneElement",
		"Organization":                    "https://spdx.org/rdf/3.0.1/terms/Core/Organization",
		"PackageVerificationCode":         "https://spdx.org/rdf/3.0.1/terms/Core/PackageVerificationCode",
		"Person":                          "https://spdx.org/rdf/3.0.1/terms/Core/Person",
		"PositiveIntegerRange":            "https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange",
		"PresenceType":                    "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType",
		"ProfileIdentifierType":           "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType",
		"Relationship":                    "https://spdx.org/rdf/3.0.1/terms/Core/Relationship",
		"RelationshipCompleteness":        "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness",
		"RelationshipType":                "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType",
		"SoftwareAgent":                   "https://spdx.org/rdf/3.0.1/terms/Core/SoftwareAgent",
		"SpdxDocument":                    "https://spdx.org/rdf/3.0.1/terms/Core/SpdxDocument",
		"SpdxOrganization":                "https://spdx.org/rdf/3.0.1/terms/Core/SpdxOrganization",
		"SupportType":                     "https://spdx.org/rdf/3.0.1/terms/Core/SupportType",
		"Tool":                            "https://spdx.org/rdf/3.0.1/terms/Core/Tool",
		"ai_AIPackage":                    "https://spdx.org/rdf/3.0.1/terms/AI/AIPackage",
		"ai_EnergyConsumption":            "https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumption",
		"ai_EnergyConsumptionDescription": "https://spdx.org/rdf/3.0.1/terms/AI/EnergyConsumptionDescription",
		"ai_EnergyUnitType":               "https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType",
		"ai_SafetyRiskAssessmentType":     "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType",
		"ai_autonomyType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/AI/autonomyType",
			"@type":    "@vocab",
		},
		"ai_domain": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/domain",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_energyConsumption": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/energyConsumption",
			"@type": "@vocab",
		},
		"ai_energyQuantity": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/energyQuantity",
			"@type": "http://www.w3.org/2001/XMLSchema#decimal",
		},
		"ai_energyUnit": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/AI/EnergyUnitType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/AI/energyUnit",
			"@type":    "@vocab",
		},
		"ai_finetuningEnergyConsumption": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/finetuningEnergyConsumption",
			"@type": "@vocab",
		},
		"ai_hyperparameter": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/hyperparameter",
			"@type": "@vocab",
		},
		"ai_inferenceEnergyConsumption": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/inferenceEnergyConsumption",
			"@type": "@vocab",
		},
		"ai_informationAboutApplication": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/informationAboutApplication",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_informationAboutTraining": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/informationAboutTraining",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_limitation": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/limitation",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_metric": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/metric",
			"@type": "@vocab",
		},
		"ai_metricDecisionThreshold": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/metricDecisionThreshold",
			"@type": "@vocab",
		},
		"ai_modelDataPreprocessing": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/modelDataPreprocessing",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_modelExplainability": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/modelExplainability",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_safetyRiskAssessment": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/AI/SafetyRiskAssessmentType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/AI/safetyRiskAssessment",
			"@type":    "@vocab",
		},
		"ai_standardCompliance": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/standardCompliance",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_trainingEnergyConsumption": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/trainingEnergyConsumption",
			"@type": "@vocab",
		},
		"ai_typeOfModel": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/AI/typeOfModel",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"ai_useSensitivePersonalInformation": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/AI/useSensitivePersonalInformation",
			"@type":    "@vocab",
		},
		"algorithm": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/HashAlgorithm/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/algorithm",
			"@type":    "@vocab",
		},
		"annotationType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/AnnotationType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/annotationType",
			"@type":    "@vocab",
		},
		"beginIntegerRange": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/beginIntegerRange",
			"@type": "http://www.w3.org/2001/XMLSchema#positiveInteger",
		},
		"build_Build": "https://spdx.org/rdf/3.0.1/terms/Build/Build",
		"build_buildEndTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/buildEndTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"build_buildId": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/buildId",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"build_buildStartTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/buildStartTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"build_buildType": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/buildType",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"build_configSourceDigest": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/configSourceDigest",
			"@type": "@vocab",
		},
		"build_configSourceEntrypoint": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/configSourceEntrypoint",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"build_configSourceUri": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/configSourceUri",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"build_environment": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/environment",
			"@type": "@vocab",
		},
		"build_parameter": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Build/parameter",
			"@type": "@vocab",
		},
		"builtTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/builtTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"comment": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/comment",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"completeness": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipCompleteness/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/completeness",
			"@type":    "@vocab",
		},
		"contentType": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/contentType",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"context": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/context",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"created": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/created",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"createdBy": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/createdBy",
			"@type": "@vocab",
		},
		"createdUsing": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/createdUsing",
			"@type": "@vocab",
		},
		"creationInfo": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/creationInfo",
			"@type": "@vocab",
		},
		"dataLicense": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/dataLicense",
			"@type": "@vocab",
		},
		"dataset_ConfidentialityLevelType": "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType",
		"dataset_DatasetAvailabilityType":  "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType",
		"dataset_DatasetPackage":           "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetPackage",
		"dataset_DatasetType":              "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType",
		"dataset_anonymizationMethodUsed": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/anonymizationMethodUsed",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_confidentialityLevel": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Dataset/ConfidentialityLevelType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Dataset/confidentialityLevel",
			"@type":    "@vocab",
		},
		"dataset_dataCollectionProcess": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/dataCollectionProcess",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_dataPreprocessing": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/dataPreprocessing",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_datasetAvailability": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetAvailabilityType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Dataset/datasetAvailability",
			"@type":    "@vocab",
		},
		"dataset_datasetNoise": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/datasetNoise",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_datasetSize": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/datasetSize",
			"@type": "http://www.w3.org/2001/XMLSchema#nonNegativeInteger",
		},
		"dataset_datasetType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Dataset/DatasetType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Dataset/datasetType",
			"@type":    "@vocab",
		},
		"dataset_datasetUpdateMechanism": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/datasetUpdateMechanism",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_hasSensitivePersonalInformation": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/PresenceType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Dataset/hasSensitivePersonalInformation",
			"@type":    "@vocab",
		},
		"dataset_intendedUse": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/intendedUse",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_knownBias": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/knownBias",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"dataset_sensor": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Dataset/sensor",
			"@type": "@vocab",
		},
		"definingArtifact": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/definingArtifact",
			"@type": "@vocab",
		},
		"description": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/description",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"element": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/element",
			"@type": "@vocab",
		},
		"endIntegerRange": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/endIntegerRange",
			"@type": "http://www.w3.org/2001/XMLSchema#positiveInteger",
		},
		"endTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/endTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"expandedlicensing_ConjunctiveLicenseSet":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ConjunctiveLicenseSet",
		"expandedlicensing_CustomLicense":           "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/CustomLicense",
		"expandedlicensing_CustomLicenseAddition":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/CustomLicenseAddition",
		"expandedlicensing_DisjunctiveLicenseSet":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/DisjunctiveLicenseSet",
		"expandedlicensing_ExtendableLicense":       "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ExtendableLicense",
		"expandedlicensing_IndividualLicensingInfo": "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/IndividualLicensingInfo",
		"expandedlicensing_License":                 "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/License",
		"expandedlicensing_LicenseAddition":         "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/LicenseAddition",
		"expandedlicensing_ListedLicense":           "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ListedLicense",
		"expandedlicensing_ListedLicenseException":  "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/ListedLicenseException",
		"expandedlicensing_NoAssertionLicense":      "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/NoAssertionLicense",
		"expandedlicensing_NoneLicense":             "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/NoneLicense",
		"expandedlicensing_OrLaterOperator":         "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/OrLaterOperator",
		"expandedlicensing_WithAdditionOperator":    "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/WithAdditionOperator",
		"expandedlicensing_additionText": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/additionText",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_deprecatedVersion": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/deprecatedVersion",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_isDeprecatedAdditionId": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isDeprecatedAdditionId",
			"@type": "http://www.w3.org/2001/XMLSchema#boolean",
		},
		"expandedlicensing_isDeprecatedLicenseId": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isDeprecatedLicenseId",
			"@type": "http://www.w3.org/2001/XMLSchema#boolean",
		},
		"expandedlicensing_isFsfLibre": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isFsfLibre",
			"@type": "http://www.w3.org/2001/XMLSchema#boolean",
		},
		"expandedlicensing_isOsiApproved": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/isOsiApproved",
			"@type": "http://www.w3.org/2001/XMLSchema#boolean",
		},
		"expandedlicensing_licenseXml": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/licenseXml",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_listVersionAdded": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/listVersionAdded",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_member": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/member",
			"@type": "@vocab",
		},
		"expandedlicensing_obsoletedBy": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/obsoletedBy",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_seeAlso": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/seeAlso",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"expandedlicensing_standardAdditionTemplate": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardAdditionTemplate",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_standardLicenseHeader": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardLicenseHeader",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_standardLicenseTemplate": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/standardLicenseTemplate",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"expandedlicensing_subjectAddition": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectAddition",
			"@type": "@vocab",
		},
		"expandedlicensing_subjectExtendableLicense": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectExtendableLicense",
			"@type": "@vocab",
		},
		"expandedlicensing_subjectLicense": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/ExpandedLicensing/subjectLicense",
			"@type": "@vocab",
		},
		"extension": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/extension",
			"@type": "@vocab",
		},
		"extension_CdxPropertiesExtension": "https://spdx.org/rdf/3.0.1/terms/Extension/CdxPropertiesExtension",
		"extension_CdxPropertyEntry":       "https://spdx.org/rdf/3.0.1/terms/Extension/CdxPropertyEntry",
		"extension_Extension":              "https://spdx.org/rdf/3.0.1/terms/Extension/Extension",
		"extension_cdxPropName": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Extension/cdxPropName",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"extension_cdxPropValue": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Extension/cdxPropValue",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"extension_cdxProperty": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Extension/cdxProperty",
			"@type": "@vocab",
		},
		"externalIdentifier": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/externalIdentifier",
			"@type": "@vocab",
		},
		"externalIdentifierType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/ExternalIdentifierType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/externalIdentifierType",
			"@type":    "@vocab",
		},
		"externalRef": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/externalRef",
			"@type": "@vocab",
		},
		"externalRefType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/ExternalRefType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/externalRefType",
			"@type":    "@vocab",
		},
		"externalSpdxId": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/externalSpdxId",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"from": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/from",
			"@type": "@vocab",
		},
		"hashValue": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/hashValue",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"identifier": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/identifier",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"identifierLocator": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/identifierLocator",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"import": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/import",
			"@type": "@vocab",
		},
		"issuingAuthority": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/issuingAuthority",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"key": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/key",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"locationHint": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/locationHint",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"locator": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/locator",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"name": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/name",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"namespace": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/namespace",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"namespaceMap": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/namespaceMap",
			"@type": "@vocab",
		},
		"originatedBy": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/originatedBy",
			"@type": "@vocab",
		},
		"packageVerificationCodeExcludedFile": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/packageVerificationCodeExcludedFile",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"prefix": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/prefix",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"profileConformance": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/ProfileIdentifierType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/profileConformance",
			"@type":    "@vocab",
		},
		"relationshipType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/RelationshipType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/relationshipType",
			"@type":    "@vocab",
		},
		"releaseTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/releaseTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"rootElement": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/rootElement",
			"@type": "@vocab",
		},
		"scope": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/LifecycleScopeType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/scope",
			"@type":    "@vocab",
		},
		"security_CvssSeverityType":                                "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType",
		"security_CvssV2VulnAssessmentRelationship":                "https://spdx.org/rdf/3.0.1/terms/Security/CvssV2VulnAssessmentRelationship",
		"security_CvssV3VulnAssessmentRelationship":                "https://spdx.org/rdf/3.0.1/terms/Security/CvssV3VulnAssessmentRelationship",
		"security_CvssV4VulnAssessmentRelationship":                "https://spdx.org/rdf/3.0.1/terms/Security/CvssV4VulnAssessmentRelationship",
		"security_EpssVulnAssessmentRelationship":                  "https://spdx.org/rdf/3.0.1/terms/Security/EpssVulnAssessmentRelationship",
		"security_ExploitCatalogType":                              "https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType",
		"security_ExploitCatalogVulnAssessmentRelationship":        "https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogVulnAssessmentRelationship",
		"security_SsvcDecisionType":                                "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType",
		"security_SsvcVulnAssessmentRelationship":                  "https://spdx.org/rdf/3.0.1/terms/Security/SsvcVulnAssessmentRelationship",
		"security_VexAffectedVulnAssessmentRelationship":           "https://spdx.org/rdf/3.0.1/terms/Security/VexAffectedVulnAssessmentRelationship",
		"security_VexFixedVulnAssessmentRelationship":              "https://spdx.org/rdf/3.0.1/terms/Security/VexFixedVulnAssessmentRelationship",
		"security_VexJustificationType":                            "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType",
		"security_VexNotAffectedVulnAssessmentRelationship":        "https://spdx.org/rdf/3.0.1/terms/Security/VexNotAffectedVulnAssessmentRelationship",
		"security_VexUnderInvestigationVulnAssessmentRelationship": "https://spdx.org/rdf/3.0.1/terms/Security/VexUnderInvestigationVulnAssessmentRelationship",
		"security_VexVulnAssessmentRelationship":                   "https://spdx.org/rdf/3.0.1/terms/Security/VexVulnAssessmentRelationship",
		"security_VulnAssessmentRelationship":                      "https://spdx.org/rdf/3.0.1/terms/Security/VulnAssessmentRelationship",
		"security_Vulnerability":                                   "https://spdx.org/rdf/3.0.1/terms/Security/Vulnerability",
		"security_actionStatement": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/actionStatement",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"security_actionStatementTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/actionStatementTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"security_assessedElement": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/assessedElement",
			"@type": "@vocab",
		},
		"security_catalogType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Security/ExploitCatalogType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Security/catalogType",
			"@type":    "@vocab",
		},
		"security_decisionType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Security/SsvcDecisionType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Security/decisionType",
			"@type":    "@vocab",
		},
		"security_exploited": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/exploited",
			"@type": "http://www.w3.org/2001/XMLSchema#boolean",
		},
		"security_impactStatement": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/impactStatement",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"security_impactStatementTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/impactStatementTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"security_justificationType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Security/VexJustificationType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Security/justificationType",
			"@type":    "@vocab",
		},
		"security_locator": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/locator",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"security_modifiedTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/modifiedTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"security_percentile": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/percentile",
			"@type": "http://www.w3.org/2001/XMLSchema#decimal",
		},
		"security_probability": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/probability",
			"@type": "http://www.w3.org/2001/XMLSchema#decimal",
		},
		"security_publishedTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/publishedTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"security_score": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/score",
			"@type": "http://www.w3.org/2001/XMLSchema#decimal",
		},
		"security_severity": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Security/CvssSeverityType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Security/severity",
			"@type":    "@vocab",
		},
		"security_statusNotes": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/statusNotes",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"security_vectorString": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/vectorString",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"security_vexVersion": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/vexVersion",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"security_withdrawnTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Security/withdrawnTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"simplelicensing_AnyLicenseInfo":      "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/AnyLicenseInfo",
		"simplelicensing_LicenseExpression":   "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/LicenseExpression",
		"simplelicensing_SimpleLicensingText": "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/SimpleLicensingText",
		"simplelicensing_customIdToUri": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/customIdToUri",
			"@type": "@vocab",
		},
		"simplelicensing_licenseExpression": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseExpression",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"simplelicensing_licenseListVersion": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseListVersion",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"simplelicensing_licenseText": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/SimpleLicensing/licenseText",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"software_ContentIdentifier":     "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifier",
		"software_ContentIdentifierType": "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType",
		"software_File":                  "https://spdx.org/rdf/3.0.1/terms/Software/File",
		"software_FileKindType":          "https://spdx.org/rdf/3.0.1/terms/Software/FileKindType",
		"software_Package":               "https://spdx.org/rdf/3.0.1/terms/Software/Package",
		"software_Sbom":                  "https://spdx.org/rdf/3.0.1/terms/Software/Sbom",
		"software_SbomType":              "https://spdx.org/rdf/3.0.1/terms/Software/SbomType",
		"software_Snippet":               "https://spdx.org/rdf/3.0.1/terms/Software/Snippet",
		"software_SoftwareArtifact":      "https://spdx.org/rdf/3.0.1/terms/Software/SoftwareArtifact",
		"software_SoftwarePurpose":       "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose",
		"software_additionalPurpose": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Software/additionalPurpose",
			"@type":    "@vocab",
		},
		"software_attributionText": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/attributionText",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"software_byteRange": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/byteRange",
			"@type": "https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange",
		},
		"software_contentIdentifier": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifier",
			"@type": "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifier",
		},
		"software_contentIdentifierType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Software/ContentIdentifierType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifierType",
			"@type":    "@vocab",
		},
		"software_contentIdentifierValue": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/contentIdentifierValue",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"software_copyrightText": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/copyrightText",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"software_downloadLocation": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/downloadLocation",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"software_fileKind": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Software/FileKindType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Software/fileKind",
			"@type":    "@vocab",
		},
		"software_homePage": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/homePage",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"software_lineRange": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/lineRange",
			"@type": "https://spdx.org/rdf/3.0.1/terms/Core/PositiveIntegerRange",
		},
		"software_packageUrl": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/packageUrl",
			"@type": "http://www.w3.org/2001/XMLSchema#anyURI",
		},
		"software_packageVersion": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/packageVersion",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"software_primaryPurpose": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Software/SoftwarePurpose/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Software/primaryPurpose",
			"@type":    "@vocab",
		},
		"software_sbomType": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Software/SbomType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Software/sbomType",
			"@type":    "@vocab",
		},
		"software_snippetFromFile": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/snippetFromFile",
			"@type": "@vocab",
		},
		"software_sourceInfo": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Software/sourceInfo",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"spdx":   "https://spdx.org/rdf/3.0.1/terms/",
		"spdxId": "@id",
		"specVersion": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/specVersion",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"standardName": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/standardName",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"startTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/startTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"statement": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/statement",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"subject": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/subject",
			"@type": "@vocab",
		},
		"summary": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/summary",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"suppliedBy": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/suppliedBy",
			"@type": "@vocab",
		},
		"supportLevel": map[string]any{
			"@context": map[string]any{"@vocab": "https://spdx.org/rdf/3.0.1/terms/Core/SupportType/"},
			"@id":      "https://spdx.org/rdf/3.0.1/terms/Core/supportLevel",
			"@type":    "@vocab",
		},
		"to": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/to",
			"@type": "@vocab",
		},
		"type": "@type",
		"validUntilTime": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/validUntilTime",
			"@type": "http://www.w3.org/2001/XMLSchema#dateTimeStamp",
		},
		"value": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/value",
			"@type": "http://www.w3.org/2001/XMLSchema#string",
		},
		"verifiedUsing": map[string]any{
			"@id":   "https://spdx.org/rdf/3.0.1/terms/Core/verifiedUsing",
			"@type": "@vocab",
		},
	}},
		NewExternalIRI,
		AIPackage{},
		Agent{},
		Annotation{},
		AnnotationType{},
		AnnotationType_Other,
		AnnotationType_Review,
		Artifact{},
		Bom{},
		Build{},
		Bundle{},
		CdxPropertiesExtension{},
		CdxPropertyEntry{},
		ConfidentialityLevelType{},
		ConfidentialityLevelType_Amber,
		ConfidentialityLevelType_Clear,
		ConfidentialityLevelType_Green,
		ConfidentialityLevelType_Red,
		ConjunctiveLicenseSet{},
		ContentIdentifier{},
		ContentIdentifierType{},
		ContentIdentifierType_Gitoid,
		ContentIdentifierType_Swhid,
		CreationInfo{},
		CustomLicense{},
		CustomLicenseAddition{},
		CvssSeverityType{},
		CvssSeverityType_Critical,
		CvssSeverityType_High,
		CvssSeverityType_Low,
		CvssSeverityType_Medium,
		CvssSeverityType_None,
		CvssV2VulnAssessmentRelationship{},
		CvssV3VulnAssessmentRelationship{},
		CvssV4VulnAssessmentRelationship{},
		DatasetAvailabilityType{},
		DatasetAvailabilityType_Clickthrough,
		DatasetAvailabilityType_DirectDownload,
		DatasetAvailabilityType_Query,
		DatasetAvailabilityType_Registration,
		DatasetAvailabilityType_ScrapingScript,
		DatasetPackage{},
		DatasetType{},
		DatasetType_Audio,
		DatasetType_Categorical,
		DatasetType_Graph,
		DatasetType_Image,
		DatasetType_NoAssertion,
		DatasetType_Numeric,
		DatasetType_Other,
		DatasetType_Sensor,
		DatasetType_Structured,
		DatasetType_Syntactic,
		DatasetType_Text,
		DatasetType_Timeseries,
		DatasetType_Timestamp,
		DatasetType_Video,
		DictionaryEntry{},
		DisjunctiveLicenseSet{},
		Element{},
		ElementCollection{},
		EnergyConsumption{},
		EnergyConsumptionDescription{},
		EnergyUnitType{},
		EnergyUnitType_KilowattHour,
		EnergyUnitType_Megajoule,
		EnergyUnitType_Other,
		EpssVulnAssessmentRelationship{},
		ExploitCatalogType{},
		ExploitCatalogType_Kev,
		ExploitCatalogType_Other,
		ExploitCatalogVulnAssessmentRelationship{},
		ExtendableLicense{},
		Extension{},
		ExternalIdentifier{},
		ExternalIdentifierType{},
		ExternalIdentifierType_Cpe22,
		ExternalIdentifierType_Cpe23,
		ExternalIdentifierType_Cve,
		ExternalIdentifierType_Email,
		ExternalIdentifierType_Gitoid,
		ExternalIdentifierType_Other,
		ExternalIdentifierType_PackageUrl,
		ExternalIdentifierType_SecurityOther,
		ExternalIdentifierType_Swhid,
		ExternalIdentifierType_Swid,
		ExternalIdentifierType_UrlScheme,
		ExternalMap{},
		ExternalRef{},
		ExternalRefType{},
		ExternalRefType_AltDownloadLocation,
		ExternalRefType_AltWebPage,
		ExternalRefType_BinaryArtifact,
		ExternalRefType_Bower,
		ExternalRefType_BuildMeta,
		ExternalRefType_BuildSystem,
		ExternalRefType_CertificationReport,
		ExternalRefType_Chat,
		ExternalRefType_ComponentAnalysisReport,
		ExternalRefType_Cwe,
		ExternalRefType_Documentation,
		ExternalRefType_DynamicAnalysisReport,
		ExternalRefType_EolNotice,
		ExternalRefType_ExportControlAssessment,
		ExternalRefType_Funding,
		ExternalRefType_IssueTracker,
		ExternalRefType_License,
		ExternalRefType_MailingList,
		ExternalRefType_MavenCentral,
		ExternalRefType_Metrics,
		ExternalRefType_Npm,
		ExternalRefType_Nuget,
		ExternalRefType_Other,
		ExternalRefType_PrivacyAssessment,
		ExternalRefType_ProductMetadata,
		ExternalRefType_PurchaseOrder,
		ExternalRefType_QualityAssessmentReport,
		ExternalRefType_ReleaseHistory,
		ExternalRefType_ReleaseNotes,
		ExternalRefType_RiskAssessment,
		ExternalRefType_RuntimeAnalysisReport,
		ExternalRefType_SecureSoftwareAttestation,
		ExternalRefType_SecurityAdversaryModel,
		ExternalRefType_SecurityAdvisory,
		ExternalRefType_SecurityFix,
		ExternalRefType_SecurityOther,
		ExternalRefType_SecurityPenTestReport,
		ExternalRefType_SecurityPolicy,
		ExternalRefType_SecurityThreatModel,
		ExternalRefType_SocialMedia,
		ExternalRefType_SourceArtifact,
		ExternalRefType_StaticAnalysisReport,
		ExternalRefType_Support,
		ExternalRefType_Vcs,
		ExternalRefType_VulnerabilityDisclosureReport,
		ExternalRefType_VulnerabilityExploitabilityAssessment,
		File{},
		FileKindType{},
		FileKindType_Directory,
		FileKindType_File,
		Hash{},
		HashAlgorithm{},
		HashAlgorithm_Adler32,
		HashAlgorithm_Blake2b256,
		HashAlgorithm_Blake2b384,
		HashAlgorithm_Blake2b512,
		HashAlgorithm_Blake3,
		HashAlgorithm_CrystalsDilithium,
		HashAlgorithm_CrystalsKyber,
		HashAlgorithm_Falcon,
		HashAlgorithm_Md2,
		HashAlgorithm_Md4,
		HashAlgorithm_Md5,
		HashAlgorithm_Md6,
		HashAlgorithm_Other,
		HashAlgorithm_Sha1,
		HashAlgorithm_Sha224,
		HashAlgorithm_Sha256,
		HashAlgorithm_Sha384,
		HashAlgorithm_Sha3_224,
		HashAlgorithm_Sha3_256,
		HashAlgorithm_Sha3_384,
		HashAlgorithm_Sha3_512,
		HashAlgorithm_Sha512,
		IndividualElement{},
		IndividualElement_NoAssertionElement,
		IndividualElement_NoneElement,
		IndividualLicensingInfo{},
		IndividualLicensingInfo_NoAssertionLicense,
		IndividualLicensingInfo_NoneLicense,
		IntegrityMethod{},
		License{},
		LicenseAddition{},
		LicenseExpression{},
		LicenseInfo{},
		LifecycleScopeType{},
		LifecycleScopeType_Build,
		LifecycleScopeType_Design,
		LifecycleScopeType_Development,
		LifecycleScopeType_Other,
		LifecycleScopeType_Runtime,
		LifecycleScopeType_Test,
		LifecycleScopedRelationship{},
		ListedLicense{},
		ListedLicenseException{},
		NamespaceMap{},
		OrLaterOperator{},
		Organization{},
		Organization_SpdxOrganization,
		Package{},
		PackageVerificationCode{},
		Person{},
		PositiveIntegerRange{},
		PresenceType{},
		PresenceType_No,
		PresenceType_NoAssertion,
		PresenceType_Yes,
		ProfileIdentifierType{},
		ProfileIdentifierType_Ai,
		ProfileIdentifierType_Build,
		ProfileIdentifierType_Core,
		ProfileIdentifierType_Dataset,
		ProfileIdentifierType_ExpandedLicensing,
		ProfileIdentifierType_Extension,
		ProfileIdentifierType_Lite,
		ProfileIdentifierType_Security,
		ProfileIdentifierType_SimpleLicensing,
		ProfileIdentifierType_Software,
		Relationship{},
		RelationshipCompleteness{},
		RelationshipCompleteness_Complete,
		RelationshipCompleteness_Incomplete,
		RelationshipCompleteness_NoAssertion,
		RelationshipType{},
		RelationshipType_Affects,
		RelationshipType_AmendedBy,
		RelationshipType_AncestorOf,
		RelationshipType_AvailableFrom,
		RelationshipType_Configures,
		RelationshipType_Contains,
		RelationshipType_CoordinatedBy,
		RelationshipType_CopiedTo,
		RelationshipType_DelegatedTo,
		RelationshipType_DependsOn,
		RelationshipType_DescendantOf,
		RelationshipType_Describes,
		RelationshipType_DoesNotAffect,
		RelationshipType_ExpandsTo,
		RelationshipType_ExploitCreatedBy,
		RelationshipType_FixedBy,
		RelationshipType_FixedIn,
		RelationshipType_FoundBy,
		RelationshipType_Generates,
		RelationshipType_HasAddedFile,
		RelationshipType_HasAssessmentFor,
		RelationshipType_HasAssociatedVulnerability,
		RelationshipType_HasConcludedLicense,
		RelationshipType_HasDataFile,
		RelationshipType_HasDeclaredLicense,
		RelationshipType_HasDeletedFile,
		RelationshipType_HasDependencyManifest,
		RelationshipType_HasDistributionArtifact,
		RelationshipType_HasDocumentation,
		RelationshipType_HasDynamicLink,
		RelationshipType_HasEvidence,
		RelationshipType_HasExample,
		RelationshipType_HasHost,
		RelationshipType_HasInput,
		RelationshipType_HasMetadata,
		RelationshipType_HasOptionalComponent,
		RelationshipType_HasOptionalDependency,
		RelationshipType_HasOutput,
		RelationshipType_HasPrerequisite,
		RelationshipType_HasProvidedDependency,
		RelationshipType_HasRequirement,
		RelationshipType_HasSpecification,
		RelationshipType_HasStaticLink,
		RelationshipType_HasTest,
		RelationshipType_HasTestCase,
		RelationshipType_HasVariant,
		RelationshipType_InvokedBy,
		RelationshipType_ModifiedBy,
		RelationshipType_Other,
		RelationshipType_PackagedBy,
		RelationshipType_PatchedBy,
		RelationshipType_PublishedBy,
		RelationshipType_ReportedBy,
		RelationshipType_RepublishedBy,
		RelationshipType_SerializedInArtifact,
		RelationshipType_TestedOn,
		RelationshipType_TrainedOn,
		RelationshipType_UnderInvestigationFor,
		RelationshipType_UsesTool,
		SafetyRiskAssessmentType{},
		SafetyRiskAssessmentType_High,
		SafetyRiskAssessmentType_Low,
		SafetyRiskAssessmentType_Medium,
		SafetyRiskAssessmentType_Serious,
		Sbom{},
		SbomType{},
		SbomType_Analyzed,
		SbomType_Build,
		SbomType_Deployed,
		SbomType_Design,
		SbomType_Runtime,
		SbomType_Source,
		SimpleLicensingText{},
		Snippet{},
		SoftwareAgent{},
		SoftwareArtifact{},
		SoftwarePurpose{},
		SoftwarePurpose_Application,
		SoftwarePurpose_Archive,
		SoftwarePurpose_Bom,
		SoftwarePurpose_Configuration,
		SoftwarePurpose_Container,
		SoftwarePurpose_Data,
		SoftwarePurpose_Device,
		SoftwarePurpose_DeviceDriver,
		SoftwarePurpose_DiskImage,
		SoftwarePurpose_Documentation,
		SoftwarePurpose_Evidence,
		SoftwarePurpose_Executable,
		SoftwarePurpose_File,
		SoftwarePurpose_FilesystemImage,
		SoftwarePurpose_Firmware,
		SoftwarePurpose_Framework,
		SoftwarePurpose_Install,
		SoftwarePurpose_Library,
		SoftwarePurpose_Manifest,
		SoftwarePurpose_Model,
		SoftwarePurpose_Module,
		SoftwarePurpose_OperatingSystem,
		SoftwarePurpose_Other,
		SoftwarePurpose_Patch,
		SoftwarePurpose_Platform,
		SoftwarePurpose_Requirement,
		SoftwarePurpose_Source,
		SoftwarePurpose_Specification,
		SoftwarePurpose_Test,
		SpdxDocument{},
		SsvcDecisionType{},
		SsvcDecisionType_Act,
		SsvcDecisionType_Attend,
		SsvcDecisionType_Track,
		SsvcDecisionType_TrackStar,
		SsvcVulnAssessmentRelationship{},
		SupportType{},
		SupportType_Deployed,
		SupportType_Development,
		SupportType_EndOfSupport,
		SupportType_LimitedSupport,
		SupportType_NoAssertion,
		SupportType_NoSupport,
		SupportType_Support,
		Tool{},
		VexAffectedVulnAssessmentRelationship{},
		VexFixedVulnAssessmentRelationship{},
		VexJustificationType{},
		VexJustificationType_ComponentNotPresent,
		VexJustificationType_InlineMitigationsAlreadyExist,
		VexJustificationType_VulnerableCodeCannotBeControlledByAdversary,
		VexJustificationType_VulnerableCodeNotInExecutePath,
		VexJustificationType_VulnerableCodeNotPresent,
		VexNotAffectedVulnAssessmentRelationship{},
		VexUnderInvestigationVulnAssessmentRelationship{},
		VexVulnAssessmentRelationship{},
		VulnAssessmentRelationship{},
		Vulnerability{},
		WithAdditionOperator{},
	)
}
